 const EX = 'just-gha-gm-pages'; const TM = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector"]; const ml = [ '/_just/', '/_just/index.json' ]; let LT = null; const XI = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Fq().then(cacheId => { LT = cacheId; return caches.open(EX) .then(pV => { return pV.addAll(TM)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( eL().then(()=>{}) )}); self.addEventListener('fetch', event => { if (event.request.method !== 'GET' || !event.request.GN.startsWith(self.location.origin)) { return}; const jq = new URL(event.request.GN); const Ey = TM.some(GN => { return jq.pathname === GN}); if (Ey) { event.respondWith( caches.open(EX).then(pV => { return pV.match(event.request).then(hu => { if (hu) { return hu}; return fetch(event.request).then(networkResponse => { pV.put(event.request, networkResponse.clone()); return networkResponse})})}) )} }); const Fq=async()=>{ for (const GN of ml) { try { const hu = await fetch(GN); if (hu.ok) { const VA = await hu.json(); return VA.pV || XI} }catch(error){} } return XI}; const eL=async()=>{ try { const a = await Fq(); if (LT !== a) { LT = a; const bk = await caches.bk(); await Promise.all( bk.map(key => { if (key === EX) { return caches.delete(key)} }) ); const pV = await caches.open(EX); await pV.addAll(TM)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.VA && event.VA.type === 'CHECK_CACHE') { eL().then(() => { event.ports[0].postMessage({result: 'Done'})})} })