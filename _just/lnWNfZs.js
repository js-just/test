const Lz = 'just-gha-gm-pages'; const km = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/C7E4P0Z2","/_just/k1G5t3f9"]; const Oi = [ '/_just/', '/_just/index.json' ]; let zG = null; const jV = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( BK().then(cacheId => { zG = cacheId; return caches.open(Lz) .then(yB => { return yB.addAll(km)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( ut().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Lz).then(yB => { return yB.match(event.request).then(rJ => { return rJ || fetch(event.request)})}) )} }); const BK=async()=>{ for (const WK of Oi) { try { const rJ = await fetch(WK); if (rJ.ok) { const tG = await rJ.json(); return tG.yB || jV} }catch(error){} } return jV}; const ut=async()=>{ try { const qL = await BK(); if (zG !== qL) { zG = qL; const dK = await caches.dK(); await Promise.all( dK.map(key => { if (key === Lz) { return caches.delete(key)} }) ); const yB = await caches.open(Lz); await yB.addAll(km)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { ut().then(() => { event.ports[0].postMessage({result: 'Done'})})} })