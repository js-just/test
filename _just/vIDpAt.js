const eh = 'just-gha-gm-pages'; const Zx = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/N7h4s1K9","/_just/P5X0M8k2"]; const zN = [ '/_just/', '/_just/index.json' ]; let eP = null; const IP = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( LF().then(cacheId => { eP = cacheId; return caches.open(eh) .then(pT => { return pT.addAll(Zx)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( pP().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(eh).then(pT => { return pT.match(event.request).then(nq => { return nq || fetch(event.request)})}) )} }); const LF=async()=>{ for (const vq of zN) { try { const nq = await fetch(vq); if (nq.ok) { const cC = await nq.json(); return cC.pT || IP} }catch(error){} } return IP}; const pP=async()=>{ try { const KE = await LF(); if (eP !== KE) { eP = KE; const dK = await caches.dK(); await Promise.all( dK.map(key => { if (key === eh) { return caches.delete(key)} }) ); const pT = await caches.open(eh); await pT.addAll(Zx)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { pP().then(() => { event.ports[0].postMessage({result: 'Done'})})} })