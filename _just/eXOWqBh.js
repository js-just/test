const fR = 'just-gha-gm-pages'; const KB = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/z4U6S8b3","/_just/V0v-N5w9"]; const mc = [ '/_just/', '/_just/index.json' ]; let MQ = null; const Qo = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( wv().then(cacheId => { MQ = cacheId; return caches.open(fR) .then(Ae => { return Ae.addAll(KB)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( tc().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(fR).then(Ae => { return Ae.match(event.request).then(UE => { return UE || fetch(event.request)})}) )} }); const wv=async()=>{ for (const yE of mc) { try { const UE = await fetch(yE); if (UE.ok) { const Lb = await UE.json(); return Lb.Ae || Qo} }catch(error){} } return Qo}; const tc=async()=>{ try { const Br = await wv(); if (MQ !== Br) { MQ = Br; const KE = await caches.KE(); await Promise.all( KE.map(key => { if (key === fR) { return caches.delete(key)} }) ); const Ae = await caches.open(fR); await Ae.addAll(KB)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { tc().then(() => { event.ports[0].postMessage({result: 'Done'})})} })