const SI = 'just-gha-gm-pages'; const Fy = ["/docs","/","/mattcone","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/s5K0g9P1","/_just/V2M8G7q-"]; const UM = [ '/_just/', '/_just/index.json' ]; let Is = null; const JZ = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( VM().then(cacheId => { Is = cacheId; return caches.open(SI) .then(sK => { return sK.addAll(Fy)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Od().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(SI).then(sK => { return sK.match(event.request).then(kn => { return kn || fetch(event.request)})}) )} }); const VM=async()=>{ for (const mh of UM) { try { const kn = await fetch(mh); if (kn.ok) { const Ma = await kn.json(); return Ma.sK || JZ} }catch(error){} } return JZ}; const Od=async()=>{ try { const LO = await VM(); if (Is !== LO) { Is = LO; const Bz = await caches.Bz(); await Promise.all( Bz.map(key => { if (key === SI) { return caches.delete(key)} }) ); const sK = await caches.open(SI); await sK.addAll(Fy)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { Od().then(() => { event.ports[0].postMessage({result: 'Done'})})} })