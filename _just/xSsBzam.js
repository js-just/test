const uj = 'just-gha-gm-pages'; const YC = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/T2R4z6Q5","/_just/D1C9f7e_"]; const PU = [ '/_just/', '/_just/index.json' ]; let zK = null; const pT = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( VE().then(cacheId => { zK = cacheId; return caches.open(uj) .then(Uw => { return Uw.addAll(YC)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( ue().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(uj).then(Uw => { return Uw.match(event.request).then(aI => { return aI || fetch(event.request)})}) )} }); const VE=async()=>{ for (const FN of PU) { try { const aI = await fetch(FN); if (aI.ok) { const qs = await aI.json(); return qs.Uw || pT} }catch(error){} } return pT}; const ue=async()=>{ try { const Xl = await VE(); if (zK !== Xl) { zK = Xl; const xU = await caches.xU(); await Promise.all( xU.map(key => { if (key === uj) { return caches.delete(key)} }) ); const Uw = await caches.open(uj); await Uw.addAll(YC)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { ue().then(() => { event.ports[0].postMessage({result: 'Done'})})} })