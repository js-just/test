const Bd = 'just-gha-gm-pages'; const tb = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/m2a8O5E3","/_just/Q6K1C9Y_"]; const ns = [ '/_just/', '/_just/index.json' ]; let vN = null; const zN = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Dl().then(cacheId => { vN = cacheId; return caches.open(Bd) .then(Mw => { return Mw.addAll(tb)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Hh().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Bd).then(Mw => { return Mw.match(event.request).then(CA => { return CA || fetch(event.request)})}) )} }); const Dl=async()=>{ for (const fP of ns) { try { const CA = await fetch(fP); if (CA.ok) { const gi = await CA.json(); return gi.Mw || zN} }catch(error){} } return zN}; const Hh=async()=>{ try { const uW = await Dl(); if (vN !== uW) { vN = uW; const jh = await caches.jh(); await Promise.all( jh.map(key => { if (key === Bd) { return caches.delete(key)} }) ); const Mw = await caches.open(Bd); await Mw.addAll(tb)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.gi && event.gi.type === 'CHECK_CACHE') { Hh().then(() => { event.ports[0].postMessage({result: 'Done'})})} })