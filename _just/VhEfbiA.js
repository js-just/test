const Wg = 'just-gha-gm-pages'; const BG = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/z7O5o-m_","/_just/b1i9T3y2"]; const jw = [ '/_just/', '/_just/index.json' ]; let AJ = null; const Tf = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Zt().then(cacheId => { AJ = cacheId; return caches.open(Wg) .then(jr => { return jr.addAll(BG)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( ea().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Wg).then(jr => { return jr.match(event.request).then(pS => { return pS || fetch(event.request)})}) )} }); const Zt=async()=>{ for (const Lk of jw) { try { const pS = await fetch(Lk); if (pS.ok) { const cq = await pS.json(); return cq.jr || Tf} }catch(error){} } return Tf}; const ea=async()=>{ try { const iC = await Zt(); if (AJ !== iC) { AJ = iC; const yK = await caches.yK(); await Promise.all( yK.map(key => { if (key === Wg) { return caches.delete(key)} }) ); const jr = await caches.open(Wg); await jr.addAll(BG)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { ea().then(() => { event.ports[0].postMessage({result: 'Done'})})} })