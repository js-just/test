const tG = 'just-gha-gm-pages'; const lJ = ["/docs","/","/mattcone","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/V_v9u5T7","/_just/I1F2Y3E4"]; const un = [ '/_just/', '/_just/index.json' ]; let Eu = null; const kw = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( pP().then(cacheId => { Eu = cacheId; return caches.open(tG) .then(jT => { return jT.addAll(lJ)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( st().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(tG).then(jT => { return jT.match(event.request).then(Ee => { return Ee || fetch(event.request)})}) )} }); const pP=async()=>{ for (const QD of un) { try { const Ee = await fetch(QD); if (Ee.ok) { const nh = await Ee.json(); return nh.jT || kw} }catch(error){} } return kw}; const st=async()=>{ try { const wL = await pP(); if (Eu !== wL) { Eu = wL; const wx = await caches.wx(); await Promise.all( wx.map(key => { if (key === tG) { return caches.delete(key)} }) ); const jT = await caches.open(tG); await jT.addAll(lJ)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { st().then(() => { event.ports[0].postMessage({result: 'Done'})})} })