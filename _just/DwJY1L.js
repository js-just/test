const Pw = 'just-gha-gm-pages'; const Kh = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/l0a6u-j9","/_just/m8g_o3W2"]; const DJ = [ '/_just/', '/_just/index.json' ]; let Nt = null; const OW = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( uf().then(cacheId => { Nt = cacheId; return caches.open(Pw) .then(Gb => { return Gb.addAll(Kh)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( zt().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Pw).then(Gb => { return Gb.match(event.request).then(Ow => { return Ow || fetch(event.request)})}) )} }); const uf=async()=>{ for (const Mb of DJ) { try { const Ow = await fetch(Mb); if (Ow.ok) { const ey = await Ow.json(); return ey.Gb || OW} }catch(error){} } return OW}; const zt=async()=>{ try { const oX = await uf(); if (Nt !== oX) { Nt = oX; const Mp = await caches.Mp(); await Promise.all( Mp.map(key => { if (key === Pw) { return caches.delete(key)} }) ); const Gb = await caches.open(Pw); await Gb.addAll(Kh)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { zt().then(() => { event.ports[0].postMessage({result: 'Done'})})} })