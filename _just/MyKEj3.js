const CG = 'just-gha-gm-pages'; const GT = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/Q6P7j_W8","/_just/b9R-B4U5"]; const M = [ '/_just/', '/_just/index.json' ]; let cq = null; const kC = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( TS().then(cacheId => { cq = cacheId; return caches.open(CG) .then(on => { return on.addAll(GT)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( ng().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(CG).then(on => { return on.match(event.request).then(QZ => { return QZ || fetch(event.request)})}) )} }); const TS=async()=>{ for (const tc of M) { try { const QZ = await fetch(tc); if (QZ.ok) { const ca = await QZ.json(); return ca.on || kC} }catch(error){} } return kC}; const ng=async()=>{ try { const Ej = await TS(); if (cq !== Ej) { cq = Ej; const LP = await caches.LP(); await Promise.all( LP.map(key => { if (key === CG) { return caches.delete(key)} }) ); const on = await caches.open(CG); await on.addAll(GT)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { ng().then(() => { event.ports[0].postMessage({result: 'Done'})})} })