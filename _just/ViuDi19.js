const SK = 'just-gha-gm-pages'; const SZ = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/K0M_E1c3","/_just/S-J5H2g8"]; const Na = [ '/_just/', '/_just/index.json' ]; let Ti = null; const hK = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Zg().then(cacheId => { Ti = cacheId; return caches.open(SK) .then(bT => { return bT.addAll(SZ)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( LZ().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(SK).then(bT => { return bT.match(event.request).then(ht => { return ht || fetch(event.request)})}) )} }); const Zg=async()=>{ for (const MO of Na) { try { const ht = await fetch(MO); if (ht.ok) { const ZI = await ht.json(); return ZI.bT || hK} }catch(error){} } return hK}; const LZ=async()=>{ try { const Ec = await Zg(); if (Ti !== Ec) { Ti = Ec; const xL = await caches.xL(); await Promise.all( xL.map(key => { if (key === SK) { return caches.delete(key)} }) ); const bT = await caches.open(SK); await bT.addAll(SZ)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { LZ().then(() => { event.ports[0].postMessage({result: 'Done'})})} })