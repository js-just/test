const lM = 'just-gha-gm-pages'; const Yb = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/j-e1p2a_","/_just/d4B6Y7g0"]; const HT = [ '/_just/', '/_just/index.json' ]; let Pv = null; const Sl = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Jh().then(cacheId => { Pv = cacheId; return caches.open(lM) .then(AU => { return AU.addAll(Yb)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Le().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(lM).then(AU => { return AU.match(event.request).then(IB => { return IB || fetch(event.request)})}) )} }); const Jh=async()=>{ for (const wb of HT) { try { const IB = await fetch(wb); if (IB.ok) { const jG = await IB.json(); return jG.AU || Sl} }catch(error){} } return Sl}; const Le=async()=>{ try { const ih = await Jh(); if (Pv !== ih) { Pv = ih; const In = await caches.In(); await Promise.all( In.map(key => { if (key === lM) { return caches.delete(key)} }) ); const AU = await caches.open(lM); await AU.addAll(Yb)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { Le().then(() => { event.ports[0].postMessage({result: 'Done'})})} })