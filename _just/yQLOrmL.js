const Pu = 'just-gha-gm-pages'; const DG = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/P5Y1x0I6","/_just/H3j-B8a9"]; const kK = [ '/_just/', '/_just/index.json' ]; let Pw = null; const ts = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( eo().then(cacheId => { Pw = cacheId; return caches.open(Pu) .then(CR => { return CR.addAll(DG)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( oq().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Pu).then(CR => { return CR.match(event.request).then(RT => { return RT || fetch(event.request)})}) )} }); const eo=async()=>{ for (const vR of kK) { try { const RT = await fetch(vR); if (RT.ok) { const qx = await RT.json(); return qx.CR || ts} }catch(error){} } return ts}; const oq=async()=>{ try { const tY = await eo(); if (Pw !== tY) { Pw = tY; const Kw = await caches.Kw(); await Promise.all( Kw.map(key => { if (key === Pu) { return caches.delete(key)} }) ); const CR = await caches.open(Pu); await CR.addAll(DG)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.qx && event.qx.type === 'CHECK_CACHE') { oq().then(() => { event.ports[0].postMessage({result: 'Done'})})} })