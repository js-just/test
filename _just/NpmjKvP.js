const NL = 'just-gha-gm-pages'; const By = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/A5e4P0T2","/_just/c1V9q-n6"]; const qZ = [ '/_just/', '/_just/index.json' ]; let hO = null; const RL = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( JQ().then(cacheId => { hO = cacheId; return caches.open(NL) .then(Zb => { return Zb.addAll(By)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( zL().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(NL).then(Zb => { return Zb.match(event.request).then(sU => { return sU || fetch(event.request)})}) )} }); const JQ=async()=>{ for (const cZ of qZ) { try { const sU = await fetch(cZ); if (sU.ok) { const cV = await sU.json(); return cV.Zb || RL} }catch(error){} } return RL}; const zL=async()=>{ try { const hr = await JQ(); if (hO !== hr) { hO = hr; const nF = await caches.nF(); await Promise.all( nF.map(key => { if (key === NL) { return caches.delete(key)} }) ); const Zb = await caches.open(NL); await Zb.addAll(By)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { zL().then(() => { event.ports[0].postMessage({result: 'Done'})})} })