const Cu = 'just-gha-gm-pages'; const EP = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/m7J3d6Z-","/_just/T4w9S2c0"]; const KI = [ '/_just/', '/_just/index.json' ]; let wE = null; const eF = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( pD().then(cacheId => { wE = cacheId; return caches.open(Cu) .then(Jw => { return Jw.addAll(EP)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( MT().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Cu).then(Jw => { return Jw.match(event.request).then(yw => { return yw || fetch(event.request)})}) )} }); const pD=async()=>{ for (const CF of KI) { try { const yw = await fetch(CF); if (yw.ok) { const hg = await yw.json(); return hg.Jw || eF} }catch(error){} } return eF}; const MT=async()=>{ try { const LN = await pD(); if (wE !== LN) { wE = LN; const hL = await caches.hL(); await Promise.all( hL.map(key => { if (key === Cu) { return caches.delete(key)} }) ); const Jw = await caches.open(Cu); await Jw.addAll(EP)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { MT().then(() => { event.ports[0].postMessage({result: 'Done'})})} })