const z = 'just-gha-gm-pages'; const EA = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/h_u1t9s0","/_just/W5V4U8S6"]; const Hy = [ '/_just/', '/_just/index.json' ]; let Lg = null; const HS = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Hg().then(cacheId => { Lg = cacheId; return caches.open(z) .then(xW => { return xW.addAll(EA)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( IZ().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(z).then(xW => { return xW.match(event.request).then(Gk => { return Gk || fetch(event.request)})}) )} }); const Hg=async()=>{ for (const NU of Hy) { try { const Gk = await fetch(NU); if (Gk.ok) { const DK = await Gk.json(); return DK.xW || HS} }catch(error){} } return HS}; const IZ=async()=>{ try { const BS = await Hg(); if (Lg !== BS) { Lg = BS; const Su = await caches.Su(); await Promise.all( Su.map(key => { if (key === z) { return caches.delete(key)} }) ); const xW = await caches.open(z); await xW.addAll(EA)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { IZ().then(() => { event.ports[0].postMessage({result: 'Done'})})} })