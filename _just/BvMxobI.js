const tF = 'just-gha-gm-pages'; const CO = ["/docs","/","/mattcone","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/m7Y3b6i4","/_just/w1l2p5X-"]; const ra = [ '/_just/', '/_just/index.json' ]; let qI = null; const bc = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( dy().then(cacheId => { qI = cacheId; return caches.open(tF) .then(bJ => { return bJ.addAll(CO)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( sw().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(tF).then(bJ => { return bJ.match(event.request).then(Gu => { return Gu || fetch(event.request)})}) )} }); const dy=async()=>{ for (const yt of ra) { try { const Gu = await fetch(yt); if (Gu.ok) { const JT = await Gu.json(); return JT.bJ || bc} }catch(error){} } return bc}; const sw=async()=>{ try { const cE = await dy(); if (qI !== cE) { qI = cE; const bp = await caches.bp(); await Promise.all( bp.map(key => { if (key === tF) { return caches.delete(key)} }) ); const bJ = await caches.open(tF); await bJ.addAll(CO)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { sw().then(() => { event.ports[0].postMessage({result: 'Done'})})} })