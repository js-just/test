const bK = 'just-gha-gm-pages'; const Xl = ["/docs","/","/mattcone","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/L0S5d2e4","/_just/W6D1j8N7"]; const EC = [ '/_just/', '/_just/index.json' ]; let CH = null; const wU = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( zQ().then(cacheId => { CH = cacheId; return caches.open(bK) .then(Hm => { return Hm.addAll(Xl)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( cw().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(bK).then(Hm => { return Hm.match(event.request).then(nS => { return nS || fetch(event.request)})}) )} }); const zQ=async()=>{ for (const BW of EC) { try { const nS = await fetch(BW); if (nS.ok) { const yP = await nS.json(); return yP.Hm || wU} }catch(error){} } return wU}; const cw=async()=>{ try { const Qi = await zQ(); if (CH !== Qi) { CH = Qi; const Iv = await caches.Iv(); await Promise.all( Iv.map(key => { if (key === bK) { return caches.delete(key)} }) ); const Hm = await caches.open(bK); await Hm.addAll(Xl)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { cw().then(() => { event.ports[0].postMessage({result: 'Done'})})} })