const mP = 'just-gha-gm-pages'; const yD = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/q_O3W6Y2","/_just/P9K1F5i7"]; const ux = [ '/_just/', '/_just/index.json' ]; let li = null; const nx = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Ma().then(cacheId => { li = cacheId; return caches.open(mP) .then(hT => { return hT.addAll(yD)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( gr().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(mP).then(hT => { return hT.match(event.request).then(uM => { return uM || fetch(event.request)})}) )} }); const Ma=async()=>{ for (const yu of ux) { try { const uM = await fetch(yu); if (uM.ok) { const bw = await uM.json(); return bw.hT || nx} }catch(error){} } return nx}; const gr=async()=>{ try { const OB = await Ma(); if (li !== OB) { li = OB; const xf = await caches.xf(); await Promise.all( xf.map(key => { if (key === mP) { return caches.delete(key)} }) ); const hT = await caches.open(mP); await hT.addAll(yD)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { gr().then(() => { event.ports[0].postMessage({result: 'Done'})})} })