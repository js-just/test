const wY = 'just-gha-gm-pages'; const cl = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/G-A2u8k9","/_just/S6B1a7W0"]; const AC = [ '/_just/', '/_just/index.json' ]; let kS = null; const mv = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( NU().then(cacheId => { kS = cacheId; return caches.open(wY) .then(Ec => { return Ec.addAll(cl)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( mo().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(wY).then(Ec => { return Ec.match(event.request).then(rb => { return rb || fetch(event.request)})}) )} }); const NU=async()=>{ for (const aA of AC) { try { const rb = await fetch(aA); if (rb.ok) { const l = await rb.json(); return l.Ec || mv} }catch(error){} } return mv}; const mo=async()=>{ try { const op = await NU(); if (kS !== op) { kS = op; const qW = await caches.qW(); await Promise.all( qW.map(key => { if (key === wY) { return caches.delete(key)} }) ); const Ec = await caches.open(wY); await Ec.addAll(cl)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.l && event.l.type === 'CHECK_CACHE') { mo().then(() => { event.ports[0].postMessage({result: 'Done'})})} })