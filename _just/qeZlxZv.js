const GR = 'just-gha-gm-pages'; const VN = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/L7E5D8s_","/_just/d0o3z-f1"]; const fZ = [ '/_just/', '/_just/index.json' ]; let DL = null; const XK = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Hi().then(cacheId => { DL = cacheId; return caches.open(GR) .then(tD => { return tD.addAll(VN)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( YG().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(GR).then(tD => { return tD.match(event.request).then(um => { return um || fetch(event.request)})}) )} }); const Hi=async()=>{ for (const HL of fZ) { try { const um = await fetch(HL); if (um.ok) { const uY = await um.json(); return uY.tD || XK} }catch(error){} } return XK}; const YG=async()=>{ try { const hN = await Hi(); if (DL !== hN) { DL = hN; const Np = await caches.Np(); await Promise.all( Np.map(key => { if (key === GR) { return caches.delete(key)} }) ); const tD = await caches.open(GR); await tD.addAll(VN)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { YG().then(() => { event.ports[0].postMessage({result: 'Done'})})} })