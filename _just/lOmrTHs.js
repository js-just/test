const we = 'just-gha-gm-pages'; const Jd = ["/docs","/","/mattcone","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/Z0E5N4M9","/_just/t_G-R7d2"]; const yF = [ '/_just/', '/_just/index.json' ]; let oA = null; const Jj = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Hv().then(cacheId => { oA = cacheId; return caches.open(we) .then(GF => { return GF.addAll(Jd)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( WA().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(we).then(GF => { return GF.match(event.request).then(Rw => { return Rw || fetch(event.request)})}) )} }); const Hv=async()=>{ for (const dy of yF) { try { const Rw = await fetch(dy); if (Rw.ok) { const wv = await Rw.json(); return wv.GF || Jj} }catch(error){} } return Jj}; const WA=async()=>{ try { const oL = await Hv(); if (oA !== oL) { oA = oL; const dm = await caches.dm(); await Promise.all( dm.map(key => { if (key === we) { return caches.delete(key)} }) ); const GF = await caches.open(we); await GF.addAll(Jd)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { WA().then(() => { event.ports[0].postMessage({result: 'Done'})})} })