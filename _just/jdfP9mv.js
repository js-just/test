const bY = 'just-gha-gm-pages'; const OC = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/g-H9t5I_","/_just/N1p8R3O2"]; const Fw = [ '/_just/', '/_just/index.json' ]; let Xm = null; const Ho = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( zG().then(cacheId => { Xm = cacheId; return caches.open(bY) .then(Xv => { return Xv.addAll(OC)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( xT().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(bY).then(Xv => { return Xv.match(event.request).then(fB => { return fB || fetch(event.request)})}) )} }); const zG=async()=>{ for (const pv of Fw) { try { const fB = await fetch(pv); if (fB.ok) { const Kt = await fB.json(); return Kt.Xv || Ho} }catch(error){} } return Ho}; const xT=async()=>{ try { const Tl = await zG(); if (Xm !== Tl) { Xm = Tl; const qx = await caches.qx(); await Promise.all( qx.map(key => { if (key === bY) { return caches.delete(key)} }) ); const Xv = await caches.open(bY); await Xv.addAll(OC)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { xT().then(() => { event.ports[0].postMessage({result: 'Done'})})} })