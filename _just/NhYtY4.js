const R = 'just-gha-gm-pages'; const Ac = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/i0F6U3l5","/_just/X9D_L7s8"]; const Mx = [ '/_just/', '/_just/index.json' ]; let wR = null; const jx = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( RT().then(cacheId => { wR = cacheId; return caches.open(R) .then(pa => { return pa.addAll(Ac)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Dy().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(R).then(pa => { return pa.match(event.request).then(HT => { return HT || fetch(event.request)})}) )} }); const RT=async()=>{ for (const zE of Mx) { try { const HT = await fetch(zE); if (HT.ok) { const qe = await HT.json(); return qe.pa || jx} }catch(error){} } return jx}; const Dy=async()=>{ try { const wQ = await RT(); if (wR !== wQ) { wR = wQ; const DG = await caches.DG(); await Promise.all( DG.map(key => { if (key === R) { return caches.delete(key)} }) ); const pa = await caches.open(R); await pa.addAll(Ac)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { Dy().then(() => { event.ports[0].postMessage({result: 'Done'})})} })