const cs = 'just-gha-gm-pages'; const xT = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/z8i5M3s2","/_just/X-E0G1I7"]; const SU = [ '/_just/', '/_just/index.json' ]; let SQ = null; const pg = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( nt().then(cacheId => { SQ = cacheId; return caches.open(cs) .then(XK => { return XK.addAll(xT)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( rs().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(cs).then(XK => { return XK.match(event.request).then(dO => { return dO || fetch(event.request)})}) )} }); const nt=async()=>{ for (const Hk of SU) { try { const dO = await fetch(Hk); if (dO.ok) { const OM = await dO.json(); return OM.XK || pg} }catch(error){} } return pg}; const rs=async()=>{ try { const PQ = await nt(); if (SQ !== PQ) { SQ = PQ; const VI = await caches.VI(); await Promise.all( VI.map(key => { if (key === cs) { return caches.delete(key)} }) ); const XK = await caches.open(cs); await XK.addAll(xT)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.OM && event.OM.type === 'CHECK_CACHE') { rs().then(() => { event.ports[0].postMessage({result: 'Done'})})} })