const GB = 'just-gha-gm-pages'; const MS = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/y0w-k_R6","/_just/P2r5q4K8"]; const Fk = [ '/_just/', '/_just/index.json' ]; let YH = null; const sX = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( TG().then(cacheId => { YH = cacheId; return caches.open(GB) .then(AE => { return AE.addAll(MS)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( iS().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(GB).then(AE => { return AE.match(event.request).then(xq => { return xq || fetch(event.request)})}) )} }); const TG=async()=>{ for (const EA of Fk) { try { const xq = await fetch(EA); if (xq.ok) { const Ld = await xq.json(); return Ld.AE || sX} }catch(error){} } return sX}; const iS=async()=>{ try { const Bw = await TG(); if (YH !== Bw) { YH = Bw; const oJ = await caches.oJ(); await Promise.all( oJ.map(key => { if (key === GB) { return caches.delete(key)} }) ); const AE = await caches.open(GB); await AE.addAll(MS)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { iS().then(() => { event.ports[0].postMessage({result: 'Done'})})} })