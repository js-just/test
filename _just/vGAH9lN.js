const yh = 'just-gha-gm-pages'; const ZQ = ["/docs","/","/mattcone","/noheadertest","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/d3n7g6h1","/_just/p9l4f-Y0"]; const FY = [ '/_just/', '/_just/index.json' ]; let vR = null; const KY = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( CM().then(cacheId => { vR = cacheId; return caches.open(yh) .then(UM => { return UM.addAll(ZQ)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Cr().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(yh).then(UM => { return UM.match(event.request).then(BR => { return BR || fetch(event.request)})}) )} }); const CM=async()=>{ for (const hL of FY) { try { const BR = await fetch(hL); if (BR.ok) { const Fe = await BR.json(); return Fe.UM || KY} }catch(error){} } return KY}; const Cr=async()=>{ try { const vI = await CM(); if (vR !== vI) { vR = vI; const oO = await caches.oO(); await Promise.all( oO.map(key => { if (key === yh) { return caches.delete(key)} }) ); const UM = await caches.open(yh); await UM.addAll(ZQ)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { Cr().then(() => { event.ports[0].postMessage({result: 'Done'})})} })