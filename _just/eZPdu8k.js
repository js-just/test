const XS = 'just-gha-gm-pages'; const Nc = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/i9V_Y-r7","/_just/w2F0L4T6"]; const lm = [ '/_just/', '/_just/index.json' ]; let xk = null; const gm = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Ij().then(cacheId => { xk = cacheId; return caches.open(XS) .then(fV => { return fV.addAll(Nc)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( jU().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(XS).then(fV => { return fV.match(event.request).then(TN => { return TN || fetch(event.request)})}) )} }); const Ij=async()=>{ for (const Bq of lm) { try { const TN = await fetch(Bq); if (TN.ok) { const NR = await TN.json(); return NR.fV || gm} }catch(error){} } return gm}; const jU=async()=>{ try { const LX = await Ij(); if (xk !== LX) { xk = LX; const RY = await caches.RY(); await Promise.all( RY.map(key => { if (key === XS) { return caches.delete(key)} }) ); const fV = await caches.open(XS); await fV.addAll(Nc)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { jU().then(() => { event.ports[0].postMessage({result: 'Done'})})} })