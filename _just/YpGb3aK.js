const Xj = 'just-gha-gm-pages'; const wH = ["/docs","/","/mattcone","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/R0M5g-H8","/_just/I4u9E6y3"]; const yS = [ '/_just/', '/_just/index.json' ]; let yQ = null; const xp = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Be().then(cacheId => { yQ = cacheId; return caches.open(Xj) .then(kl => { return kl.addAll(wH)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( iT().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Xj).then(kl => { return kl.match(event.request).then(FU => { return FU || fetch(event.request)})}) )} }); const Be=async()=>{ for (const aw of yS) { try { const FU = await fetch(aw); if (FU.ok) { const EG = await FU.json(); return EG.kl || xp} }catch(error){} } return xp}; const iT=async()=>{ try { const IW = await Be(); if (yQ !== IW) { yQ = IW; const Rr = await caches.Rr(); await Promise.all( Rr.map(key => { if (key === Xj) { return caches.delete(key)} }) ); const kl = await caches.open(Xj); await kl.addAll(wH)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { iT().then(() => { event.ports[0].postMessage({result: 'Done'})})} })