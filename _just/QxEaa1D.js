const iS = 'just-gha-gm-pages'; const uv = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/D9R4V6f_","/_just/r2w0Y1I-"]; const lG = [ '/_just/', '/_just/index.json' ]; let DG = null; const LO = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( lc().then(cacheId => { DG = cacheId; return caches.open(iS) .then(Cb => { return Cb.addAll(uv)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Nb().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(iS).then(Cb => { return Cb.match(event.request).then(JL => { return JL || fetch(event.request)})}) )} }); const lc=async()=>{ for (const tI of lG) { try { const JL = await fetch(tI); if (JL.ok) { const PB = await JL.json(); return PB.Cb || LO} }catch(error){} } return LO}; const Nb=async()=>{ try { const Kt = await lc(); if (DG !== Kt) { DG = Kt; const vm = await caches.vm(); await Promise.all( vm.map(key => { if (key === iS) { return caches.delete(key)} }) ); const Cb = await caches.open(iS); await Cb.addAll(uv)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { Nb().then(() => { event.ports[0].postMessage({result: 'Done'})})} })