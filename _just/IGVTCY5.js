const JM = 'just-gha-gm-pages'; const Of = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/n2E4R9A8","/_just/p7q_e3b5"]; const gs = [ '/_just/', '/_just/index.json' ]; let gq = null; const sV = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( fX().then(cacheId => { gq = cacheId; return caches.open(JM) .then(bi => { return bi.addAll(Of)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( ux().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(JM).then(bi => { return bi.match(event.request).then(os => { return os || fetch(event.request)})}) )} }); const fX=async()=>{ for (const wu of gs) { try { const os = await fetch(wu); if (os.ok) { const av = await os.json(); return av.bi || sV} }catch(error){} } return sV}; const ux=async()=>{ try { const JO = await fX(); if (gq !== JO) { gq = JO; const hd = await caches.hd(); await Promise.all( hd.map(key => { if (key === JM) { return caches.delete(key)} }) ); const bi = await caches.open(JM); await bi.addAll(Of)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { ux().then(() => { event.ports[0].postMessage({result: 'Done'})})} })