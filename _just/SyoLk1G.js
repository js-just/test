const Hc = 'just-gha-gm-pages'; const xz = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/f_e2z6V9","/_just/s5h-m0X3"]; const nK = [ '/_just/', '/_just/index.json' ]; let lb = null; const Lx = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( bS().then(cacheId => { lb = cacheId; return caches.open(Hc) .then(sd => { return sd.addAll(xz)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( CH().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Hc).then(sd => { return sd.match(event.request).then(GD => { return GD || fetch(event.request)})}) )} }); const bS=async()=>{ for (const So of nK) { try { const GD = await fetch(So); if (GD.ok) { const uc = await GD.json(); return uc.sd || Lx} }catch(error){} } return Lx}; const CH=async()=>{ try { const Dr = await bS(); if (lb !== Dr) { lb = Dr; const Co = await caches.Co(); await Promise.all( Co.map(key => { if (key === Hc) { return caches.delete(key)} }) ); const sd = await caches.open(Hc); await sd.addAll(xz)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { CH().then(() => { event.ports[0].postMessage({result: 'Done'})})} })