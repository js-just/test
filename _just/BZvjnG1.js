const Kr = 'just-gha-gm-pages'; const Sd = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/a0s3q1W8","/_just/U-S_f5p2"]; const zQ = [ '/_just/', '/_just/index.json' ]; let qK = null; const LW = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( AQ().then(cacheId => { qK = cacheId; return caches.open(Kr) .then(VI => { return VI.addAll(Sd)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( gO().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Kr).then(VI => { return VI.match(event.request).then(uK => { return uK || fetch(event.request)})}) )} }); const AQ=async()=>{ for (const wo of zQ) { try { const uK = await fetch(wo); if (uK.ok) { const No = await uK.json(); return No.VI || LW} }catch(error){} } return LW}; const gO=async()=>{ try { const hM = await AQ(); if (qK !== hM) { qK = hM; const Ua = await caches.Ua(); await Promise.all( Ua.map(key => { if (key === Kr) { return caches.delete(key)} }) ); const VI = await caches.open(Kr); await VI.addAll(Sd)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.No && event.No.type === 'CHECK_CACHE') { gO().then(() => { event.ports[0].postMessage({result: 'Done'})})} })