const Xq = 'just-gha-gm-pages'; const Cu = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/v3d2N-z9","/_just/B7x6O4Q0"]; const Kk = [ '/_just/', '/_just/index.json' ]; let yT = null; const KW = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( VF().then(cacheId => { yT = cacheId; return caches.open(Xq) .then(ib => { return ib.addAll(Cu)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Lt().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Xq).then(ib => { return ib.match(event.request).then(mN => { return mN || fetch(event.request)})}) )} }); const VF=async()=>{ for (const Hs of Kk) { try { const mN = await fetch(Hs); if (mN.ok) { const DL = await mN.json(); return DL.ib || KW} }catch(error){} } return KW}; const Lt=async()=>{ try { const xN = await VF(); if (yT !== xN) { yT = xN; const TH = await caches.TH(); await Promise.all( TH.map(key => { if (key === Xq) { return caches.delete(key)} }) ); const ib = await caches.open(Xq); await ib.addAll(Cu)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { Lt().then(() => { event.ports[0].postMessage({result: 'Done'})})} })