const vU = 'just-gha-gm-pages'; const DF = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/P2B_F1J4","/_just/l5M0z6x3"]; const Nh = [ '/_just/', '/_just/index.json' ]; let cp = null; const KZ = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( CH().then(cacheId => { cp = cacheId; return caches.open(vU) .then(WQ => { return WQ.addAll(DF)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( by().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(vU).then(WQ => { return WQ.match(event.request).then(Co => { return Co || fetch(event.request)})}) )} }); const CH=async()=>{ for (const dp of Nh) { try { const Co = await fetch(dp); if (Co.ok) { const iD = await Co.json(); return iD.WQ || KZ} }catch(error){} } return KZ}; const by=async()=>{ try { const zM = await CH(); if (cp !== zM) { cp = zM; const gj = await caches.gj(); await Promise.all( gj.map(key => { if (key === vU) { return caches.delete(key)} }) ); const WQ = await caches.open(vU); await WQ.addAll(DF)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.iD && event.iD.type === 'CHECK_CACHE') { by().then(() => { event.ports[0].postMessage({result: 'Done'})})} })