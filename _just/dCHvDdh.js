const XF = 'just-gha-gm-pages'; const UV = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/a7Z1i6K9","/_just/u2B-T4M5"]; const Hw = [ '/_just/', '/_just/index.json' ]; let mj = null; const SC = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( ep().then(cacheId => { mj = cacheId; return caches.open(XF) .then(Sc => { return Sc.addAll(UV)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Yw().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(XF).then(Sc => { return Sc.match(event.request).then(Rj => { return Rj || fetch(event.request)})}) )} }); const ep=async()=>{ for (const bz of Hw) { try { const Rj = await fetch(bz); if (Rj.ok) { const Gp = await Rj.json(); return Gp.Sc || SC} }catch(error){} } return SC}; const Yw=async()=>{ try { const rh = await ep(); if (mj !== rh) { mj = rh; const SG = await caches.SG(); await Promise.all( SG.map(key => { if (key === XF) { return caches.delete(key)} }) ); const Sc = await caches.open(XF); await Sc.addAll(UV)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.Gp && event.Gp.type === 'CHECK_CACHE') { Yw().then(() => { event.ports[0].postMessage({result: 'Done'})})} })