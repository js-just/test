const Qq = 'just-gha-gm-pages'; const jT = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/D4n1I2W8","/_just/q3A-Q6Y7"]; const So = [ '/_just/', '/_just/index.json' ]; let vx = null; const iF = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( SM().then(cacheId => { vx = cacheId; return caches.open(Qq) .then(xP => { return xP.addAll(jT)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( qQ().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Qq).then(xP => { return xP.match(event.request).then(xC => { return xC || fetch(event.request)})}) )} }); const SM=async()=>{ for (const py of So) { try { const xC = await fetch(py); if (xC.ok) { const UN = await xC.json(); return UN.xP || iF} }catch(error){} } return iF}; const qQ=async()=>{ try { const mN = await SM(); if (vx !== mN) { vx = mN; const QJ = await caches.QJ(); await Promise.all( QJ.map(key => { if (key === Qq) { return caches.delete(key)} }) ); const xP = await caches.open(Qq); await xP.addAll(jT)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { qQ().then(() => { event.ports[0].postMessage({result: 'Done'})})} })