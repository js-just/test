const qH = 'just-gha-gm-pages'; const zI = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/B1n7R6P0","/_just/p4r3X2S8"]; const hs = [ '/_just/', '/_just/index.json' ]; let Sy = null; const nZ = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( UF().then(cacheId => { Sy = cacheId; return caches.open(qH) .then(G => { return G.addAll(zI)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( qN().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(qH).then(G => { return G.match(event.request).then(qD => { return qD || fetch(event.request)})}) )} }); const UF=async()=>{ for (const Kr of hs) { try { const qD = await fetch(Kr); if (qD.ok) { const rZ = await qD.json(); return rZ.G || nZ} }catch(error){} } return nZ}; const qN=async()=>{ try { const Va = await UF(); if (Sy !== Va) { Sy = Va; const uM = await caches.uM(); await Promise.all( uM.map(key => { if (key === qH) { return caches.delete(key)} }) ); const G = await caches.open(qH); await G.addAll(zI)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.rZ && event.rZ.type === 'CHECK_CACHE') { qN().then(() => { event.ports[0].postMessage({result: 'Done'})})} })