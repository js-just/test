const WD = 'just-gha-gm-pages'; const Ul = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/Z8R2t0a4","/_just/p-w7Q1P6"]; const Dh = [ '/_just/', '/_just/index.json' ]; let aK = null; const Sc = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( hd().then(cacheId => { aK = cacheId; return caches.open(WD) .then(PC => { return PC.addAll(Ul)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( R().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(WD).then(PC => { return PC.match(event.request).then(iN => { return iN || fetch(event.request)})}) )} }); const hd=async()=>{ for (const WV of Dh) { try { const iN = await fetch(WV); if (iN.ok) { const kH = await iN.json(); return kH.PC || Sc} }catch(error){} } return Sc}; const R=async()=>{ try { const bW = await hd(); if (aK !== bW) { aK = bW; const ST = await caches.ST(); await Promise.all( ST.map(key => { if (key === WD) { return caches.delete(key)} }) ); const PC = await caches.open(WD); await PC.addAll(Ul)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { R().then(() => { event.ports[0].postMessage({result: 'Done'})})} })