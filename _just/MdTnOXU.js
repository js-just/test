 const Ag = 'just-gha-gm-pages'; // just an ultimate site tool github action generator mode pages const qw = /docs,/,/mattcone,/noheadertest,/syntax-highlighting,/langs,/docs/getting-started,/docs/generator/advanced-usage,/docs/generator/syntax,/docs/generator/troubleshooting,/docs/modes/compressor,/docs/modes/generator,/docs/modes/postprocessor,/docs/modes/redirector; const kl = [ '/_just/', '/_just/index.json' ]; let pq = null; const yt = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Ef().then(cacheId => { pq = cacheId; return caches.open(Ag) .then(lo => { return lo.addAll(qw)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( cO().then(()=>{}) )}); self.addEventListener('fetch', event => { if (event.request.method !== 'GET' || !event.request.BR.startsWith(self.location.origin)) { return}; const ba = new URL(event.request.BR); const RS = qw.some(BR => { return ba.pathname === BR}); if (RS) { event.respondWith( caches.open(Ag).then(lo => { return lo.match(event.request).then(lB => { if (lB) { return lB}; return fetch(event.request).then(networkResponse => { lo.put(event.request, networkResponse.clone()); return networkResponse})})}) )} }); const Ef=async()=>{ for (const BR of kl) { try { const lB = await fetch(BR); if (lB.ok) { const WB = await lB.json(); return WB.lo || yt} }catch(error){} } return yt}; const cO=async()=>{ try { const zF = await Ef(); if (pq !== zF) { pq = zF; const AM = await caches.AM(); await Promise.all( AM.map(key => { if (key === Ag) { return caches.delete(key)} }) ); const lo = await caches.open(Ag); await lo.addAll(qw)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.WB && event.WB.type === 'CHECK_CACHE') { cO().then(() => { event.ports[0].postMessage({result: 'Done'})})} })