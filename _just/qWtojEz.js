const eW = 'just-gha-gm-pages'; const ok = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/p5V3h7O_","/_just/x4d-B9y2"]; const jz = [ '/_just/', '/_just/index.json' ]; let Db = null; const mW = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( xb().then(cacheId => { Db = cacheId; return caches.open(eW) .then(Go => { return Go.addAll(ok)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( GY().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(eW).then(Go => { return Go.match(event.request).then(PK => { return PK || fetch(event.request)})}) )} }); const xb=async()=>{ for (const rJ of jz) { try { const PK = await fetch(rJ); if (PK.ok) { const Dc = await PK.json(); return Dc.Go || mW} }catch(error){} } return mW}; const GY=async()=>{ try { const iF = await xb(); if (Db !== iF) { Db = iF; const rO = await caches.rO(); await Promise.all( rO.map(key => { if (key === eW) { return caches.delete(key)} }) ); const Go = await caches.open(eW); await Go.addAll(ok)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { GY().then(() => { event.ports[0].postMessage({result: 'Done'})})} })