const dj = 'just-gha-gm-pages'; const fU = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/h_B5j9J6","/_just/L4c8G-f3"]; const CP = [ '/_just/', '/_just/index.json' ]; let Pn = null; const ze = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( bm().then(cacheId => { Pn = cacheId; return caches.open(dj) .then(ln => { return ln.addAll(fU)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( rv().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(dj).then(ln => { return ln.match(event.request).then(Zf => { return Zf || fetch(event.request)})}) )} }); const bm=async()=>{ for (const zc of CP) { try { const Zf = await fetch(zc); if (Zf.ok) { const Hn = await Zf.json(); return Hn.ln || ze} }catch(error){} } return ze}; const rv=async()=>{ try { const bk = await bm(); if (Pn !== bk) { Pn = bk; const Md = await caches.Md(); await Promise.all( Md.map(key => { if (key === dj) { return caches.delete(key)} }) ); const ln = await caches.open(dj); await ln.addAll(fU)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { rv().then(() => { event.ports[0].postMessage({result: 'Done'})})} })