const GO = 'just-gha-gm-pages'; const rn = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/e0x7z-V4","/_just/A5T8B6y2"]; const yh = [ '/_just/', '/_just/index.json' ]; let Ed = null; const ck = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( kZ().then(cacheId => { Ed = cacheId; return caches.open(GO) .then(eb => { return eb.addAll(rn)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( iY().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(GO).then(eb => { return eb.match(event.request).then(wQ => { return wQ || fetch(event.request)})}) )} }); const kZ=async()=>{ for (const bZ of yh) { try { const wQ = await fetch(bZ); if (wQ.ok) { const w = await wQ.json(); return w.eb || ck} }catch(error){} } return ck}; const iY=async()=>{ try { const ue = await kZ(); if (Ed !== ue) { Ed = ue; const aH = await caches.aH(); await Promise.all( aH.map(key => { if (key === GO) { return caches.delete(key)} }) ); const eb = await caches.open(GO); await eb.addAll(rn)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { iY().then(() => { event.ports[0].postMessage({result: 'Done'})})} })