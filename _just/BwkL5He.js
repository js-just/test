const VU = 'just-gha-gm-pages'; const uO = ["/docs","/","/mattcone","/noheadertest","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/S8m2A3y_","/_just/I-p6c9V4"]; const tT = [ '/_just/', '/_just/index.json' ]; let Yi = null; const CE = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Kj().then(cacheId => { Yi = cacheId; return caches.open(VU) .then(gh => { return gh.addAll(uO)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Kk().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(VU).then(gh => { return gh.match(event.request).then(UK => { return UK || fetch(event.request)})}) )} }); const Kj=async()=>{ for (const ok of tT) { try { const UK = await fetch(ok); if (UK.ok) { const gy = await UK.json(); return gy.gh || CE} }catch(error){} } return CE}; const Kk=async()=>{ try { const Qs = await Kj(); if (Yi !== Qs) { Yi = Qs; const Sp = await caches.Sp(); await Promise.all( Sp.map(key => { if (key === VU) { return caches.delete(key)} }) ); const gh = await caches.open(VU); await gh.addAll(uO)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { Kk().then(() => { event.ports[0].postMessage({result: 'Done'})})} })