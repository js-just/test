const Gl = 'just-gha-gm-pages'; const yI = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/q9u8X1r0","/_just/e4O6C3K2"]; const Nu = [ '/_just/', '/_just/index.json' ]; let fi = null; const XV = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( DP().then(cacheId => { fi = cacheId; return caches.open(Gl) .then(UN => { return UN.addAll(yI)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Uh().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Gl).then(UN => { return UN.match(event.request).then(KV => { return KV || fetch(event.request)})}) )} }); const DP=async()=>{ for (const at of Nu) { try { const KV = await fetch(at); if (KV.ok) { const DM = await KV.json(); return DM.UN || XV} }catch(error){} } return XV}; const Uh=async()=>{ try { const qe = await DP(); if (fi !== qe) { fi = qe; const v = await caches.v(); await Promise.all( v.map(key => { if (key === Gl) { return caches.delete(key)} }) ); const UN = await caches.open(Gl); await UN.addAll(yI)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.DM && event.DM.type === 'CHECK_CACHE') { Uh().then(() => { event.ports[0].postMessage({result: 'Done'})})} })