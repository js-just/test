const Gk = 'just-gha-gm-pages'; const HZ = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/d9m2R0v8","/_just/u4l3g6P_"]; const AJ = [ '/_just/', '/_just/index.json' ]; let Dy = null; const KC = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( fm().then(cacheId => { Dy = cacheId; return caches.open(Gk) .then(aw => { return aw.addAll(HZ)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Uy().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Gk).then(aw => { return aw.match(event.request).then(VX => { return VX || fetch(event.request)})}) )} }); const fm=async()=>{ for (const iS of AJ) { try { const VX = await fetch(iS); if (VX.ok) { const Pa = await VX.json(); return Pa.aw || KC} }catch(error){} } return KC}; const Uy=async()=>{ try { const Jz = await fm(); if (Dy !== Jz) { Dy = Jz; const xq = await caches.xq(); await Promise.all( xq.map(key => { if (key === Gk) { return caches.delete(key)} }) ); const aw = await caches.open(Gk); await aw.addAll(HZ)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { Uy().then(() => { event.ports[0].postMessage({result: 'Done'})})} })