const Ro = 'just-gha-gm-pages'; const iR = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/G8K5Q-i1","/_just/w_f6H3T0"]; const Pd = [ '/_just/', '/_just/index.json' ]; let GB = null; const QC = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Qq().then(cacheId => { GB = cacheId; return caches.open(Ro) .then(Vq => { return Vq.addAll(iR)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( AB().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Ro).then(Vq => { return Vq.match(event.request).then(XD => { return XD || fetch(event.request)})}) )} }); const Qq=async()=>{ for (const TD of Pd) { try { const XD = await fetch(TD); if (XD.ok) { const Mb = await XD.json(); return Mb.Vq || QC} }catch(error){} } return QC}; const AB=async()=>{ try { const Gy = await Qq(); if (GB !== Gy) { GB = Gy; const mc = await caches.mc(); await Promise.all( mc.map(key => { if (key === Ro) { return caches.delete(key)} }) ); const Vq = await caches.open(Ro); await Vq.addAll(iR)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { AB().then(() => { event.ports[0].postMessage({result: 'Done'})})} })