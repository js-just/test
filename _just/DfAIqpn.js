const qM = 'just-gha-gm-pages'; const TV = ["/docs","/","/mattcone","/noheadertest","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/w3d0K7C4","/_just/k9b1e5r2"]; const cP = [ '/_just/', '/_just/index.json' ]; let RH = null; const HF = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( OY().then(cacheId => { RH = cacheId; return caches.open(qM) .then(Zp => { return Zp.addAll(TV)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( ud().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(qM).then(Zp => { return Zp.match(event.request).then(Bm => { return Bm || fetch(event.request)})}) )} }); const OY=async()=>{ for (const yN of cP) { try { const Bm = await fetch(yN); if (Bm.ok) { const bJ = await Bm.json(); return bJ.Zp || HF} }catch(error){} } return HF}; const ud=async()=>{ try { const Bu = await OY(); if (RH !== Bu) { RH = Bu; const Za = await caches.Za(); await Promise.all( Za.map(key => { if (key === qM) { return caches.delete(key)} }) ); const Zp = await caches.open(qM); await Zp.addAll(TV)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { ud().then(() => { event.ports[0].postMessage({result: 'Done'})})} })