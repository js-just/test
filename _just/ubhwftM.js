const ny = 'just-gha-gm-pages'; const GN = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/i8p1W4y7","/_just/J_l9I0x6"]; const BS = [ '/_just/', '/_just/index.json' ]; let jP = null; const Wj = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Qd().then(cacheId => { jP = cacheId; return caches.open(ny) .then(fg => { return fg.addAll(GN)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Hu().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(ny).then(fg => { return fg.match(event.request).then(PN => { return PN || fetch(event.request)})}) )} }); const Qd=async()=>{ for (const Mk of BS) { try { const PN = await fetch(Mk); if (PN.ok) { const kz = await PN.json(); return kz.fg || Wj} }catch(error){} } return Wj}; const Hu=async()=>{ try { const fz = await Qd(); if (jP !== fz) { jP = fz; const Rh = await caches.Rh(); await Promise.all( Rh.map(key => { if (key === ny) { return caches.delete(key)} }) ); const fg = await caches.open(ny); await fg.addAll(GN)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { Hu().then(() => { event.ports[0].postMessage({result: 'Done'})})} })