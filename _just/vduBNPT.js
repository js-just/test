const Ty = 'just-gha-gm-pages'; const WV = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/k2R1x4S5","/_just/Y0w-t7T6"]; const kd = [ '/_just/', '/_just/index.json' ]; let pg = null; const xt = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( nG().then(cacheId => { pg = cacheId; return caches.open(Ty) .then(um => { return um.addAll(WV)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( MH().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Ty).then(um => { return um.match(event.request).then(On => { return On || fetch(event.request)})}) )} }); const nG=async()=>{ for (const vF of kd) { try { const On = await fetch(vF); if (On.ok) { const KH = await On.json(); return KH.um || xt} }catch(error){} } return xt}; const MH=async()=>{ try { const tS = await nG(); if (pg !== tS) { pg = tS; const pG = await caches.pG(); await Promise.all( pG.map(key => { if (key === Ty) { return caches.delete(key)} }) ); const um = await caches.open(Ty); await um.addAll(WV)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { MH().then(() => { event.ports[0].postMessage({result: 'Done'})})} })