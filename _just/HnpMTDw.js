const YR = 'just-gha-gm-pages'; const mv = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/D1w4j0v6","/_just/V5E9G3c2"]; const RN = [ '/_just/', '/_just/index.json' ]; let kC = null; const aU = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( ys().then(cacheId => { kC = cacheId; return caches.open(YR) .then(jW => { return jW.addAll(mv)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( HX().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(YR).then(jW => { return jW.match(event.request).then(Fg => { return Fg || fetch(event.request)})}) )} }); const ys=async()=>{ for (const pY of RN) { try { const Fg = await fetch(pY); if (Fg.ok) { const wA = await Fg.json(); return wA.jW || aU} }catch(error){} } return aU}; const HX=async()=>{ try { const bM = await ys(); if (kC !== bM) { kC = bM; const Qr = await caches.Qr(); await Promise.all( Qr.map(key => { if (key === YR) { return caches.delete(key)} }) ); const jW = await caches.open(YR); await jW.addAll(mv)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.wA && event.wA.type === 'CHECK_CACHE') { HX().then(() => { event.ports[0].postMessage({result: 'Done'})})} })