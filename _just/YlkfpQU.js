const lx = 'just-gha-gm-pages'; const qk = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/K7b0i_c8","/_just/S3g-A5w6"]; const sn = [ '/_just/', '/_just/index.json' ]; let vS = null; const Td = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( vD().then(cacheId => { vS = cacheId; return caches.open(lx) .then(XZ => { return XZ.addAll(qk)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( cX().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(lx).then(XZ => { return XZ.match(event.request).then(uc => { return uc || fetch(event.request)})}) )} }); const vD=async()=>{ for (const Lc of sn) { try { const uc = await fetch(Lc); if (uc.ok) { const cl = await uc.json(); return cl.XZ || Td} }catch(error){} } return Td}; const cX=async()=>{ try { const GW = await vD(); if (vS !== GW) { vS = GW; const bs = await caches.bs(); await Promise.all( bs.map(key => { if (key === lx) { return caches.delete(key)} }) ); const XZ = await caches.open(lx); await XZ.addAll(qk)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.cl && event.cl.type === 'CHECK_CACHE') { cX().then(() => { event.ports[0].postMessage({result: 'Done'})})} })