const CL = 'just-gha-gm-pages'; const Qk = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/e-q2z8j6","/_just/c9S5E7D_"]; const oq = [ '/_just/', '/_just/index.json' ]; let Gb = null; const Wm = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( XK().then(cacheId => { Gb = cacheId; return caches.open(CL) .then(tR => { return tR.addAll(Qk)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Mv().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(CL).then(tR => { return tR.match(event.request).then(kh => { return kh || fetch(event.request)})}) )} }); const XK=async()=>{ for (const Kh of oq) { try { const kh = await fetch(Kh); if (kh.ok) { const N = await kh.json(); return N.tR || Wm} }catch(error){} } return Wm}; const Mv=async()=>{ try { const ql = await XK(); if (Gb !== ql) { Gb = ql; const oA = await caches.oA(); await Promise.all( oA.map(key => { if (key === CL) { return caches.delete(key)} }) ); const tR = await caches.open(CL); await tR.addAll(Qk)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { Mv().then(() => { event.ports[0].postMessage({result: 'Done'})})} })