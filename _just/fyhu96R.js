const Bs = 'just-gha-gm-pages'; const ue = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/k3j-W0Q7","/_just/J4G9d_F2"]; const tk = [ '/_just/', '/_just/index.json' ]; let bB = null; const dH = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( iy().then(cacheId => { bB = cacheId; return caches.open(Bs) .then(zc => { return zc.addAll(ue)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Wo().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Bs).then(zc => { return zc.match(event.request).then(wr => { return wr || fetch(event.request)})}) )} }); const iy=async()=>{ for (const eC of tk) { try { const wr = await fetch(eC); if (wr.ok) { const Dh = await wr.json(); return Dh.zc || dH} }catch(error){} } return dH}; const Wo=async()=>{ try { const Zb = await iy(); if (bB !== Zb) { bB = Zb; const wt = await caches.wt(); await Promise.all( wt.map(key => { if (key === Bs) { return caches.delete(key)} }) ); const zc = await caches.open(Bs); await zc.addAll(ue)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { Wo().then(() => { event.ports[0].postMessage({result: 'Done'})})} })