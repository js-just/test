const sl = 'just-gha-gm-pages'; const yq = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/o5m4b-z9","/_just/q_e6P1G8"]; const Kh = [ '/_just/', '/_just/index.json' ]; let Ig = null; const Rq = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( AV().then(cacheId => { Ig = cacheId; return caches.open(sl) .then(LI => { return LI.addAll(yq)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Oi().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(sl).then(LI => { return LI.match(event.request).then(hV => { return hV || fetch(event.request)})}) )} }); const AV=async()=>{ for (const oU of Kh) { try { const hV = await fetch(oU); if (hV.ok) { const TD = await hV.json(); return TD.LI || Rq} }catch(error){} } return Rq}; const Oi=async()=>{ try { const Vd = await AV(); if (Ig !== Vd) { Ig = Vd; const ZS = await caches.ZS(); await Promise.all( ZS.map(key => { if (key === sl) { return caches.delete(key)} }) ); const LI = await caches.open(sl); await LI.addAll(yq)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.TD && event.TD.type === 'CHECK_CACHE') { Oi().then(() => { event.ports[0].postMessage({result: 'Done'})})} })