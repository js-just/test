const Gh = 'just-gha-gm-pages'; const HU = ["/docs","/","/mattcone","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/P2M6Z-i8","/_just/T_c0S9Q3"]; const gS = [ '/_just/', '/_just/index.json' ]; let Mo = null; const Wk = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( hv().then(cacheId => { Mo = cacheId; return caches.open(Gh) .then(eq => { return eq.addAll(HU)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( jD().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Gh).then(eq => { return eq.match(event.request).then(Dx => { return Dx || fetch(event.request)})}) )} }); const hv=async()=>{ for (const ZO of gS) { try { const Dx = await fetch(ZO); if (Dx.ok) { const t = await Dx.json(); return t.eq || Wk} }catch(error){} } return Wk}; const jD=async()=>{ try { const Hy = await hv(); if (Mo !== Hy) { Mo = Hy; const SA = await caches.SA(); await Promise.all( SA.map(key => { if (key === Gh) { return caches.delete(key)} }) ); const eq = await caches.open(Gh); await eq.addAll(HU)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { jD().then(() => { event.ports[0].postMessage({result: 'Done'})})} })