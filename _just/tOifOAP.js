const oG = 'just-gha-gm-pages'; const Kz = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/C-u4a9H5","/_just/I2s8v3J0"]; const KX = [ '/_just/', '/_just/index.json' ]; let iB = null; const je = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( PF().then(cacheId => { iB = cacheId; return caches.open(oG) .then(Pp => { return Pp.addAll(Kz)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Aq().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(oG).then(Pp => { return Pp.match(event.request).then(zB => { return zB || fetch(event.request)})}) )} }); const PF=async()=>{ for (const g of KX) { try { const zB = await fetch(g); if (zB.ok) { const Ir = await zB.json(); return Ir.Pp || je} }catch(error){} } return je}; const Aq=async()=>{ try { const bM = await PF(); if (iB !== bM) { iB = bM; const vI = await caches.vI(); await Promise.all( vI.map(key => { if (key === oG) { return caches.delete(key)} }) ); const Pp = await caches.open(oG); await Pp.addAll(Kz)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { Aq().then(() => { event.ports[0].postMessage({result: 'Done'})})} })