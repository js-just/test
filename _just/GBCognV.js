const RS = 'just-gha-gm-pages'; const Ya = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/d4R0w7t2","/_just/V_z3E-j1"]; const oj = [ '/_just/', '/_just/index.json' ]; let cn = null; const FM = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Ia().then(cacheId => { cn = cacheId; return caches.open(RS) .then(aU => { return aU.addAll(Ya)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( yH().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(RS).then(aU => { return aU.match(event.request).then(lQ => { return lQ || fetch(event.request)})}) )} }); const Ia=async()=>{ for (const jK of oj) { try { const lQ = await fetch(jK); if (lQ.ok) { const kw = await lQ.json(); return kw.aU || FM} }catch(error){} } return FM}; const yH=async()=>{ try { const ms = await Ia(); if (cn !== ms) { cn = ms; const Sw = await caches.Sw(); await Promise.all( Sw.map(key => { if (key === RS) { return caches.delete(key)} }) ); const aU = await caches.open(RS); await aU.addAll(Ya)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.kw && event.kw.type === 'CHECK_CACHE') { yH().then(() => { event.ports[0].postMessage({result: 'Done'})})} })