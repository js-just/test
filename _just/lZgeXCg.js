const SF = 'just-gha-gm-pages'; const VC = ["/docs","/","/mattcone","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/T8d0x3D4","/_just/p2C_P9f5"]; const Ir = [ '/_just/', '/_just/index.json' ]; let OH = null; const PK = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( qE().then(cacheId => { OH = cacheId; return caches.open(SF) .then(mJ => { return mJ.addAll(VC)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Ko().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(SF).then(mJ => { return mJ.match(event.request).then(Az => { return Az || fetch(event.request)})}) )} }); const qE=async()=>{ for (const tj of Ir) { try { const Az = await fetch(tj); if (Az.ok) { const uI = await Az.json(); return uI.mJ || PK} }catch(error){} } return PK}; const Ko=async()=>{ try { const yc = await qE(); if (OH !== yc) { OH = yc; const ok = await caches.ok(); await Promise.all( ok.map(key => { if (key === SF) { return caches.delete(key)} }) ); const mJ = await caches.open(SF); await mJ.addAll(VC)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { Ko().then(() => { event.ports[0].postMessage({result: 'Done'})})} })