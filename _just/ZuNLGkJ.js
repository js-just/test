const Gd = 'just-gha-gm-pages'; const qS = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/H1T8D6O3","/_just/j-P5x9y_"]; const Tt = [ '/_just/', '/_just/index.json' ]; let JA = null; const cB = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( co().then(cacheId => { JA = cacheId; return caches.open(Gd) .then(yT => { return yT.addAll(qS)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Oz().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Gd).then(yT => { return yT.match(event.request).then(Wb => { return Wb || fetch(event.request)})}) )} }); const co=async()=>{ for (const ut of Tt) { try { const Wb = await fetch(ut); if (Wb.ok) { const Ov = await Wb.json(); return Ov.yT || cB} }catch(error){} } return cB}; const Oz=async()=>{ try { const Og = await co(); if (JA !== Og) { JA = Og; const wb = await caches.wb(); await Promise.all( wb.map(key => { if (key === Gd) { return caches.delete(key)} }) ); const yT = await caches.open(Gd); await yT.addAll(qS)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { Oz().then(() => { event.ports[0].postMessage({result: 'Done'})})} })