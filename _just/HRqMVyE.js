const CQ = 'just-gha-gm-pages'; const mg = ["/docs","/","/mattcone","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/O1L2J8k-","/_just/c5d4I_B3"]; const B = [ '/_just/', '/_just/index.json' ]; let aM = null; const JL = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( yM().then(cacheId => { aM = cacheId; return caches.open(CQ) .then(pT => { return pT.addAll(mg)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Du().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(CQ).then(pT => { return pT.match(event.request).then(fk => { return fk || fetch(event.request)})}) )} }); const yM=async()=>{ for (const BR of B) { try { const fk = await fetch(BR); if (fk.ok) { const mP = await fk.json(); return mP.pT || JL} }catch(error){} } return JL}; const Du=async()=>{ try { const RL = await yM(); if (aM !== RL) { aM = RL; const Vp = await caches.Vp(); await Promise.all( Vp.map(key => { if (key === CQ) { return caches.delete(key)} }) ); const pT = await caches.open(CQ); await pT.addAll(mg)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { Du().then(() => { event.ports[0].postMessage({result: 'Done'})})} })