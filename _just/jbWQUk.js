const eD = 'just-gha-gm-pages'; const DQ = ["/docs","/","/mattcone","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/s1k0f2U8","/_just/A9d3F-P6"]; const GF = [ '/_just/', '/_just/index.json' ]; let cp = null; const Af = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Cy().then(cacheId => { cp = cacheId; return caches.open(eD) .then(Uj => { return Uj.addAll(DQ)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( ry().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(eD).then(Uj => { return Uj.match(event.request).then(xI => { return xI || fetch(event.request)})}) )} }); const Cy=async()=>{ for (const Ny of GF) { try { const xI = await fetch(Ny); if (xI.ok) { const FN = await xI.json(); return FN.Uj || Af} }catch(error){} } return Af}; const ry=async()=>{ try { const dz = await Cy(); if (cp !== dz) { cp = dz; const v = await caches.v(); await Promise.all( v.map(key => { if (key === eD) { return caches.delete(key)} }) ); const Uj = await caches.open(eD); await Uj.addAll(DQ)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { ry().then(() => { event.ports[0].postMessage({result: 'Done'})})} })