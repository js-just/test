const Fd = 'just-gha-gm-pages'; const hp = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/Y0Q_n8w5","/_just/x9L1B4s3"]; const jp = [ '/_just/', '/_just/index.json' ]; let Hz = null; const PY = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( nO().then(cacheId => { Hz = cacheId; return caches.open(Fd) .then(xs => { return xs.addAll(hp)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Xk().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Fd).then(xs => { return xs.match(event.request).then(aM => { return aM || fetch(event.request)})}) )} }); const nO=async()=>{ for (const fk of jp) { try { const aM = await fetch(fk); if (aM.ok) { const nS = await aM.json(); return nS.xs || PY} }catch(error){} } return PY}; const Xk=async()=>{ try { const zv = await nO(); if (Hz !== zv) { Hz = zv; const Wc = await caches.Wc(); await Promise.all( Wc.map(key => { if (key === Fd) { return caches.delete(key)} }) ); const xs = await caches.open(Fd); await xs.addAll(hp)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.nS && event.nS.type === 'CHECK_CACHE') { Xk().then(() => { event.ports[0].postMessage({result: 'Done'})})} })