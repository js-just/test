const GB = 'just-gha-gm-pages'; const AZ = ["/docs","/","/mattcone","/noheadertest","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/L3f6l7q8","/_just/x0J1A5W_"]; const Jz = [ '/_just/', '/_just/index.json' ]; let nP = null; const OF = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( gC().then(cacheId => { nP = cacheId; return caches.open(GB) .then(cU => { return cU.addAll(AZ)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( tg().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(GB).then(cU => { return cU.match(event.request).then(tH => { return tH || fetch(event.request)})}) )} }); const gC=async()=>{ for (const RW of Jz) { try { const tH = await fetch(RW); if (tH.ok) { const VE = await tH.json(); return VE.cU || OF} }catch(error){} } return OF}; const tg=async()=>{ try { const lq = await gC(); if (nP !== lq) { nP = lq; const xQ = await caches.xQ(); await Promise.all( xQ.map(key => { if (key === GB) { return caches.delete(key)} }) ); const cU = await caches.open(GB); await cU.addAll(AZ)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { tg().then(() => { event.ports[0].postMessage({result: 'Done'})})} })