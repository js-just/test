const KB = 'just-gha-gm-pages'; const Ey = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/q0d8o7V4","/_just/U1P5l3Z_"]; const xv = [ '/_just/', '/_just/index.json' ]; let Ui = null; const gV = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Uj().then(cacheId => { Ui = cacheId; return caches.open(KB) .then(ZS => { return ZS.addAll(Ey)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( iq().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(KB).then(ZS => { return ZS.match(event.request).then(Va => { return Va || fetch(event.request)})}) )} }); const Uj=async()=>{ for (const YF of xv) { try { const Va = await fetch(YF); if (Va.ok) { const hg = await Va.json(); return hg.ZS || gV} }catch(error){} } return gV}; const iq=async()=>{ try { const xd = await Uj(); if (Ui !== xd) { Ui = xd; const ev = await caches.ev(); await Promise.all( ev.map(key => { if (key === KB) { return caches.delete(key)} }) ); const ZS = await caches.open(KB); await ZS.addAll(Ey)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { iq().then(() => { event.ports[0].postMessage({result: 'Done'})})} })