const Ra = 'just-gha-gm-pages'; const XJ = ["/docs","/","/mattcone","/noheadertest","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/x4K7u-v3","/_just/C5b2n0t_"]; const Po = [ '/_just/', '/_just/index.json' ]; let Bt = null; const Cd = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Gr().then(cacheId => { Bt = cacheId; return caches.open(Ra) .then(Xs => { return Xs.addAll(XJ)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( bo().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Ra).then(Xs => { return Xs.match(event.request).then(Eh => { return Eh || fetch(event.request)})}) )} }); const Gr=async()=>{ for (const ag of Po) { try { const Eh = await fetch(ag); if (Eh.ok) { const ZC = await Eh.json(); return ZC.Xs || Cd} }catch(error){} } return Cd}; const bo=async()=>{ try { const zP = await Gr(); if (Bt !== zP) { Bt = zP; const CS = await caches.CS(); await Promise.all( CS.map(key => { if (key === Ra) { return caches.delete(key)} }) ); const Xs = await caches.open(Ra); await Xs.addAll(XJ)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { bo().then(() => { event.ports[0].postMessage({result: 'Done'})})} })