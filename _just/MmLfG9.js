const CV = 'just-gha-gm-pages'; const RI = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/z8Z7v0B1","/_just/u_K2P3J5"]; const Cs = [ '/_just/', '/_just/index.json' ]; let ZU = null; const kH = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( XH().then(cacheId => { ZU = cacheId; return caches.open(CV) .then(Cz => { return Cz.addAll(RI)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( ep().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(CV).then(Cz => { return Cz.match(event.request).then(Fu => { return Fu || fetch(event.request)})}) )} }); const XH=async()=>{ for (const gf of Cs) { try { const Fu = await fetch(gf); if (Fu.ok) { const Eb = await Fu.json(); return Eb.Cz || kH} }catch(error){} } return kH}; const ep=async()=>{ try { const yh = await XH(); if (ZU !== yh) { ZU = yh; const Mt = await caches.Mt(); await Promise.all( Mt.map(key => { if (key === CV) { return caches.delete(key)} }) ); const Cz = await caches.open(CV); await Cz.addAll(RI)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { ep().then(() => { event.ports[0].postMessage({result: 'Done'})})} })