const iy = 'just-gha-gm-pages'; const ga = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/d6c3u0a8","/_just/b2X9N5f7"]; const rQ = [ '/_just/', '/_just/index.json' ]; let jN = null; const Kp = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( fN().then(cacheId => { jN = cacheId; return caches.open(iy) .then(Qf => { return Qf.addAll(ga)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( hk().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(iy).then(Qf => { return Qf.match(event.request).then(vK => { return vK || fetch(event.request)})}) )} }); const fN=async()=>{ for (const Mn of rQ) { try { const vK = await fetch(Mn); if (vK.ok) { const IN = await vK.json(); return IN.Qf || Kp} }catch(error){} } return Kp}; const hk=async()=>{ try { const H = await fN(); if (jN !== H) { jN = H; const xt = await caches.xt(); await Promise.all( xt.map(key => { if (key === iy) { return caches.delete(key)} }) ); const Qf = await caches.open(iy); await Qf.addAll(ga)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { hk().then(() => { event.ports[0].postMessage({result: 'Done'})})} })