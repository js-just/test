const Lx = 'just-gha-gm-pages'; const Ro = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/J3E8Z7n9","/_just/m0x2M1K_"]; const BA = [ '/_just/', '/_just/index.json' ]; let TF = null; const KL = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( cY().then(cacheId => { TF = cacheId; return caches.open(Lx) .then(aG => { return aG.addAll(Ro)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( qB().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Lx).then(aG => { return aG.match(event.request).then(qg => { return qg || fetch(event.request)})}) )} }); const cY=async()=>{ for (const xs of BA) { try { const qg = await fetch(xs); if (qg.ok) { const sF = await qg.json(); return sF.aG || KL} }catch(error){} } return KL}; const qB=async()=>{ try { const Du = await cY(); if (TF !== Du) { TF = Du; const kU = await caches.kU(); await Promise.all( kU.map(key => { if (key === Lx) { return caches.delete(key)} }) ); const aG = await caches.open(Lx); await aG.addAll(Ro)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { qB().then(() => { event.ports[0].postMessage({result: 'Done'})})} })