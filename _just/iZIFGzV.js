const Fi = 'just-gha-gm-pages'; const Kx = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector"]; const EI = [ '/_just/', '/_just/index.json' ]; let d = null; const jL = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( kD().then(cacheId => { d = cacheId; return caches.open(Fi) .then(FZ => { return FZ.addAll(Kx)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( VQ().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Fi).then(FZ => { return FZ.match(event.request).then(JA => { return JA || fetch(event.request)})}) )} }); const kD=async()=>{ for (const Ya of EI) { try { const JA = await fetch(Ya); if (JA.ok) { const zH = await JA.json(); return zH.FZ || jL} }catch(error){} } return jL}; const VQ=async()=>{ try { const Rq = await kD(); if (d !== Rq) { d = Rq; const Fq = await caches.Fq(); await Promise.all( Fq.map(key => { if (key === Fi) { return caches.delete(key)} }) ); const FZ = await caches.open(Fi); await FZ.addAll(Kx)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.zH && event.zH.type === 'CHECK_CACHE') { VQ().then(() => { event.ports[0].postMessage({result: 'Done'})})} })