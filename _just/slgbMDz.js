 const Vk = 'just-gha-gm-pages'; // just an ultimate site tool github action generator mode pages const EI = /docs,/,/mattcone,/noheadertest,/syntax-highlighting,/langs,/docs/getting-started,/docs/generator/advanced-usage,/docs/generator/syntax,/docs/generator/troubleshooting,/docs/modes/compressor,/docs/modes/generator,/docs/modes/postprocessor,/docs/modes/redirector; const PC = [ '/_just/', '/_just/index.json' ]; let gu = null; const Ts = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( vz().then(cacheId => { gu = cacheId; return caches.open(Vk) .then(JD => { return JD.addAll(EI)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Cv().then(()=>{}) )}); self.addEventListener('fetch', event => { if (event.request.method !== 'GET' || !event.request.lL.startsWith(self.location.origin)) { return}; const cH = new URL(event.request.lL); const p = EI.some(lL => { return cH.pathname === lL}); if (p) { event.respondWith( caches.open(Vk).then(JD => { return JD.match(event.request).then(Rp => { if (Rp) { return Rp}; return fetch(event.request).then(networkResponse => { JD.put(event.request, networkResponse.clone()); return networkResponse})})}) )} }); const vz=async()=>{ for (const lL of PC) { try { const Rp = await fetch(lL); if (Rp.ok) { const vg = await Rp.json(); return vg.JD || Ts} }catch(error){} } return Ts}; const Cv=async()=>{ try { const It = await vz(); if (gu !== It) { gu = It; const bO = await caches.bO(); await Promise.all( bO.map(key => { if (key === Vk) { return caches.delete(key)} }) ); const JD = await caches.open(Vk); await JD.addAll(EI)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.vg && event.vg.type === 'CHECK_CACHE') { Cv().then(() => { event.ports[0].postMessage({result: 'Done'})})} })