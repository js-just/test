const eV = 'just-gha-gm-pages'; const WZ = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/a9U5b1G7","/_just/O0z3v-x8"]; const oN = [ '/_just/', '/_just/index.json' ]; let IV = null; const Ud = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( xa().then(cacheId => { IV = cacheId; return caches.open(eV) .then(tj => { return tj.addAll(WZ)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( RH().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(eV).then(tj => { return tj.match(event.request).then(UE => { return UE || fetch(event.request)})}) )} }); const xa=async()=>{ for (const kQ of oN) { try { const UE = await fetch(kQ); if (UE.ok) { const BQ = await UE.json(); return BQ.tj || Ud} }catch(error){} } return Ud}; const RH=async()=>{ try { const Fb = await xa(); if (IV !== Fb) { IV = Fb; const Fp = await caches.Fp(); await Promise.all( Fp.map(key => { if (key === eV) { return caches.delete(key)} }) ); const tj = await caches.open(eV); await tj.addAll(WZ)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { RH().then(() => { event.ports[0].postMessage({result: 'Done'})})} })