const xh = 'just-gha-gm-pages'; const kZ = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/A3q4j1t6","/_just/F7a-Q_P2"]; const DL = [ '/_just/', '/_just/index.json' ]; let aB = null; const Jf = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( NQ().then(cacheId => { aB = cacheId; return caches.open(xh) .then(BW => { return BW.addAll(kZ)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( tj().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(xh).then(BW => { return BW.match(event.request).then(jD => { return jD || fetch(event.request)})}) )} }); const NQ=async()=>{ for (const si of DL) { try { const jD = await fetch(si); if (jD.ok) { const ty = await jD.json(); return ty.BW || Jf} }catch(error){} } return Jf}; const tj=async()=>{ try { const Qp = await NQ(); if (aB !== Qp) { aB = Qp; const cU = await caches.cU(); await Promise.all( cU.map(key => { if (key === xh) { return caches.delete(key)} }) ); const BW = await caches.open(xh); await BW.addAll(kZ)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { tj().then(() => { event.ports[0].postMessage({result: 'Done'})})} })