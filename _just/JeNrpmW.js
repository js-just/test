const fE = 'just-gha-gm-pages'; const DS = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/G4C5Y0T_","/_just/B8Q3U1M9"]; const la = [ '/_just/', '/_just/index.json' ]; let uE = null; const gu = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( oZ().then(cacheId => { uE = cacheId; return caches.open(fE) .then(zZ => { return zZ.addAll(DS)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Ke().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(fE).then(zZ => { return zZ.match(event.request).then(UP => { return UP || fetch(event.request)})}) )} }); const oZ=async()=>{ for (const oi of la) { try { const UP = await fetch(oi); if (UP.ok) { const Kd = await UP.json(); return Kd.zZ || gu} }catch(error){} } return gu}; const Ke=async()=>{ try { const QE = await oZ(); if (uE !== QE) { uE = QE; const Fo = await caches.Fo(); await Promise.all( Fo.map(key => { if (key === fE) { return caches.delete(key)} }) ); const zZ = await caches.open(fE); await zZ.addAll(DS)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.Kd && event.Kd.type === 'CHECK_CACHE') { Ke().then(() => { event.ports[0].postMessage({result: 'Done'})})} })