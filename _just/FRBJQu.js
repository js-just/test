const fi = 'just-gha-gm-pages'; const NS = ["/docs","/","/mattcone","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/W9t5b8G2","/_just/U6r1p_e3"]; const BF = [ '/_just/', '/_just/index.json' ]; let Wf = null; const ej = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Eg().then(cacheId => { Wf = cacheId; return caches.open(fi) .then(at => { return at.addAll(NS)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Ck().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(fi).then(at => { return at.match(event.request).then(AP => { return AP || fetch(event.request)})}) )} }); const Eg=async()=>{ for (const ru of BF) { try { const AP = await fetch(ru); if (AP.ok) { const eC = await AP.json(); return eC.at || ej} }catch(error){} } return ej}; const Ck=async()=>{ try { const iP = await Eg(); if (Wf !== iP) { Wf = iP; const Mx = await caches.Mx(); await Promise.all( Mx.map(key => { if (key === fi) { return caches.delete(key)} }) ); const at = await caches.open(fi); await at.addAll(NS)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { Ck().then(() => { event.ports[0].postMessage({result: 'Done'})})} })