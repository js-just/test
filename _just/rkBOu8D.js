const cj = 'just-gha-gm-pages'; const kM = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/t1h_H3D7","/_just/d8a6c0e2"]; const DG = [ '/_just/', '/_just/index.json' ]; let em = null; const tx = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( ug().then(cacheId => { em = cacheId; return caches.open(cj) .then(nY => { return nY.addAll(kM)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( ub().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(cj).then(nY => { return nY.match(event.request).then(ET => { return ET || fetch(event.request)})}) )} }); const ug=async()=>{ for (const ag of DG) { try { const ET = await fetch(ag); if (ET.ok) { const cf = await ET.json(); return cf.nY || tx} }catch(error){} } return tx}; const ub=async()=>{ try { const HQ = await ug(); if (em !== HQ) { em = HQ; const Rf = await caches.Rf(); await Promise.all( Rf.map(key => { if (key === cj) { return caches.delete(key)} }) ); const nY = await caches.open(cj); await nY.addAll(kM)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { ub().then(() => { event.ports[0].postMessage({result: 'Done'})})} })