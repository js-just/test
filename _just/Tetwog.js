const iF = 'just-gha-gm-pages'; const hP = ["/docs","/","/mattcone","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/C3K_O1I5","/_just/o8H6v9n0"]; const oW = [ '/_just/', '/_just/index.json' ]; let zl = null; const lu = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( gu().then(cacheId => { zl = cacheId; return caches.open(iF) .then(QK => { return QK.addAll(hP)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( pz().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(iF).then(QK => { return QK.match(event.request).then(hF => { return hF || fetch(event.request)})}) )} }); const gu=async()=>{ for (const Yy of oW) { try { const hF = await fetch(Yy); if (hF.ok) { const jR = await hF.json(); return jR.QK || lu} }catch(error){} } return lu}; const pz=async()=>{ try { const Pv = await gu(); if (zl !== Pv) { zl = Pv; const wS = await caches.wS(); await Promise.all( wS.map(key => { if (key === iF) { return caches.delete(key)} }) ); const QK = await caches.open(iF); await QK.addAll(hP)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { pz().then(() => { event.ports[0].postMessage({result: 'Done'})})} })