const JY = 'just-gha-gm-pages'; const IS = ["/docs","/","/mattcone","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/K9w1Z2X0","/_just/z6x4F-Q7"]; const cy = [ '/_just/', '/_just/index.json' ]; let is = null; const dM = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( VE().then(cacheId => { is = cacheId; return caches.open(JY) .then(jr => { return jr.addAll(IS)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( NV().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(JY).then(jr => { return jr.match(event.request).then(Mk => { return Mk || fetch(event.request)})}) )} }); const VE=async()=>{ for (const gp of cy) { try { const Mk = await fetch(gp); if (Mk.ok) { const rl = await Mk.json(); return rl.jr || dM} }catch(error){} } return dM}; const NV=async()=>{ try { const ZL = await VE(); if (is !== ZL) { is = ZL; const LA = await caches.LA(); await Promise.all( LA.map(key => { if (key === JY) { return caches.delete(key)} }) ); const jr = await caches.open(JY); await jr.addAll(IS)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { NV().then(() => { event.ports[0].postMessage({result: 'Done'})})} })