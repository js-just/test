const kf = 'just-gha-gm-pages'; const WA = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/M0t1N5V4","/_just/Z-E7r8e2"]; const SQ = [ '/_just/', '/_just/index.json' ]; let DZ = null; const qN = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( an().then(cacheId => { DZ = cacheId; return caches.open(kf) .then(lD => { return lD.addAll(WA)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Bt().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(kf).then(lD => { return lD.match(event.request).then(mB => { return mB || fetch(event.request)})}) )} }); const an=async()=>{ for (const xU of SQ) { try { const mB = await fetch(xU); if (mB.ok) { const pr = await mB.json(); return pr.lD || qN} }catch(error){} } return qN}; const Bt=async()=>{ try { const DK = await an(); if (DZ !== DK) { DZ = DK; const vz = await caches.vz(); await Promise.all( vz.map(key => { if (key === kf) { return caches.delete(key)} }) ); const lD = await caches.open(kf); await lD.addAll(WA)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { Bt().then(() => { event.ports[0].postMessage({result: 'Done'})})} })