const mt = 'just-gha-gm-pages'; const vr = ["/docs","/","/mattcone","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/h_H1z2O7","/_just/k0D4d5x3"]; const wA = [ '/_just/', '/_just/index.json' ]; let Ar = null; const Tz = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Nz().then(cacheId => { Ar = cacheId; return caches.open(mt) .then(Uj => { return Uj.addAll(vr)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( rf().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(mt).then(Uj => { return Uj.match(event.request).then(Vc => { return Vc || fetch(event.request)})}) )} }); const Nz=async()=>{ for (const KN of wA) { try { const Vc = await fetch(KN); if (Vc.ok) { const zR = await Vc.json(); return zR.Uj || Tz} }catch(error){} } return Tz}; const rf=async()=>{ try { const Kg = await Nz(); if (Ar !== Kg) { Ar = Kg; const fr = await caches.fr(); await Promise.all( fr.map(key => { if (key === mt) { return caches.delete(key)} }) ); const Uj = await caches.open(mt); await Uj.addAll(vr)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { rf().then(() => { event.ports[0].postMessage({result: 'Done'})})} })