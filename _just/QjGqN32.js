const Qb = 'just-gha-gm-pages'; const HN = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/i4R2c6g5","/_just/F1M7x-e3"]; const uG = [ '/_just/', '/_just/index.json' ]; let vQ = null; const UT = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( WH().then(cacheId => { vQ = cacheId; return caches.open(Qb) .then(qb => { return qb.addAll(HN)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( sL().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Qb).then(qb => { return qb.match(event.request).then(RC => { return RC || fetch(event.request)})}) )} }); const WH=async()=>{ for (const xb of uG) { try { const RC = await fetch(xb); if (RC.ok) { const Dm = await RC.json(); return Dm.qb || UT} }catch(error){} } return UT}; const sL=async()=>{ try { const nd = await WH(); if (vQ !== nd) { vQ = nd; const YC = await caches.YC(); await Promise.all( YC.map(key => { if (key === Qb) { return caches.delete(key)} }) ); const qb = await caches.open(Qb); await qb.addAll(HN)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { sL().then(() => { event.ports[0].postMessage({result: 'Done'})})} })