const Iu = 'just-gha-gm-pages'; const Gm = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/i-S3d8N0","/_just/t7o_c1W9"]; const EM = [ '/_just/', '/_just/index.json' ]; let XG = null; const eM = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( Fx().then(cacheId => { XG = cacheId; return caches.open(Iu) .then(eC => { return eC.addAll(Gm)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( QB().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Iu).then(eC => { return eC.match(event.request).then(mU => { return mU || fetch(event.request)})}) )} }); const Fx=async()=>{ for (const bQ of EM) { try { const mU = await fetch(bQ); if (mU.ok) { const cq = await mU.json(); return cq.eC || eM} }catch(error){} } return eM}; const QB=async()=>{ try { const hn = await Fx(); if (XG !== hn) { XG = hn; const CA = await caches.CA(); await Promise.all( CA.map(key => { if (key === Iu) { return caches.delete(key)} }) ); const eC = await caches.open(Iu); await eC.addAll(Gm)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { QB().then(() => { event.ports[0].postMessage({result: 'Done'})})} })