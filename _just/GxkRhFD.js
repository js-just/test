const Q = 'just-gha-gm-pages'; const Gl = ["/docs","/","/mattcone","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/u7C6z9v4","/_just/M0X3r2F-"]; const VF = [ '/_just/', '/_just/index.json' ]; let wT = null; const uI = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( ef().then(cacheId => { wT = cacheId; return caches.open(Q) .then(Hx => { return Hx.addAll(Gl)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( oM().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Q).then(Hx => { return Hx.match(event.request).then(uL => { return uL || fetch(event.request)})}) )} }); const ef=async()=>{ for (const nX of VF) { try { const uL = await fetch(nX); if (uL.ok) { const Ud = await uL.json(); return Ud.Hx || uI} }catch(error){} } return uI}; const oM=async()=>{ try { const TH = await ef(); if (wT !== TH) { wT = TH; const qd = await caches.qd(); await Promise.all( qd.map(key => { if (key === Q) { return caches.delete(key)} }) ); const Hx = await caches.open(Q); await Hx.addAll(Gl)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { oM().then(() => { event.ports[0].postMessage({result: 'Done'})})} })