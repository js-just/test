const Td = 'just-gha-gm-pages'; const Se = ["/docs","/","/mattcone","/noheadertest","/syntax-highlighting","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector"]; const cM = [ '/_just/', '/_just/index.json' ]; let gD = null; const Zf = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( MV().then(cacheId => { gD = cacheId; return caches.open(Td) .then(ck => { return ck.addAll(Se)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Kb().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Td).then(ck => { return ck.match(event.request).then(Wu => { return Wu || fetch(event.request)})}) )} }); const MV=async()=>{ for (const tj of cM) { try { const Wu = await fetch(tj); if (Wu.ok) { const gn = await Wu.json(); return gn.ck || Zf} }catch(error){} } return Zf}; const Kb=async()=>{ try { const sG = await MV(); if (gD !== sG) { gD = sG; const cE = await caches.cE(); await Promise.all( cE.map(key => { if (key === Td) { return caches.delete(key)} }) ); const ck = await caches.open(Td); await ck.addAll(Se)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.gn && event.gn.type === 'CHECK_CACHE') { Kb().then(() => { event.ports[0].postMessage({result: 'Done'})})} })