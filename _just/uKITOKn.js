const Hc = 'just-gha-gm-pages'; const RZ = ["/docs","/","/mattcone","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/W6i8j4a2","/_just/C-r9z_M7"]; const fq = [ '/_just/', '/_just/index.json' ]; let js = null; const rh = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( JD().then(cacheId => { js = cacheId; return caches.open(Hc) .then(SO => { return SO.addAll(RZ)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( mH().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Hc).then(SO => { return SO.match(event.request).then(vP => { return vP || fetch(event.request)})}) )} }); const JD=async()=>{ for (const Vg of fq) { try { const vP = await fetch(Vg); if (vP.ok) { const j = await vP.json(); return j.SO || rh} }catch(error){} } return rh}; const mH=async()=>{ try { const mJ = await JD(); if (js !== mJ) { js = mJ; const RE = await caches.RE(); await Promise.all( RE.map(key => { if (key === Hc) { return caches.delete(key)} }) ); const SO = await caches.open(Hc); await SO.addAll(RZ)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { mH().then(() => { event.ports[0].postMessage({result: 'Done'})})} })