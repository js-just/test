const yq = 'just-gha-gm-pages'; const Fx = ["/docs","/","/mattcone","/langs","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/Z-l_X8x0","/_just/F1R2A9b3"]; const wU = [ '/_just/', '/_just/index.json' ]; let Gl = null; const Jt = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( AV().then(cacheId => { Gl = cacheId; return caches.open(yq) .then(md => { return md.addAll(Fx)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( uG().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(yq).then(md => { return md.match(event.request).then(Jc => { return Jc || fetch(event.request)})}) )} }); const AV=async()=>{ for (const PZ of wU) { try { const Jc = await fetch(PZ); if (Jc.ok) { const BK = await Jc.json(); return BK.md || Jt} }catch(error){} } return Jt}; const uG=async()=>{ try { const GO = await AV(); if (Gl !== GO) { Gl = GO; const oW = await caches.oW(); await Promise.all( oW.map(key => { if (key === yq) { return caches.delete(key)} }) ); const md = await caches.open(yq); await md.addAll(Fx)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { uG().then(() => { event.ports[0].postMessage({result: 'Done'})})} })