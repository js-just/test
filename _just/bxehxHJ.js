const Dz = 'just-gha-gm-pages'; const Sf = ["/docs","/","/mattcone","/langs","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/n9c4u8R6","/_just/F2K1q3a0"]; const XU = [ '/_just/', '/_just/index.json' ]; let qW = null; const dM = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( oe().then(cacheId => { qW = cacheId; return caches.open(Dz) .then(mc => { return mc.addAll(Sf)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( SH().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Dz).then(mc => { return mc.match(event.request).then(Rm => { return Rm || fetch(event.request)})}) )} }); const oe=async()=>{ for (const PC of XU) { try { const Rm = await fetch(PC); if (Rm.ok) { const oC = await Rm.json(); return oC.mc || dM} }catch(error){} } return dM}; const SH=async()=>{ try { const ED = await oe(); if (qW !== ED) { qW = ED; const zB = await caches.zB(); await Promise.all( zB.map(key => { if (key === Dz) { return caches.delete(key)} }) ); const mc = await caches.open(Dz); await mc.addAll(Sf)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { SH().then(() => { event.ports[0].postMessage({result: 'Done'})})} })