<p><h1 id="test">test</h1>
<h1 id="test2">test</h1>
<h1 id="test3">test</h1>
<h1 id="test4">test</h1>
<h1 id="test5">test</h1>
<h1 id="test6">test</h1>
<h1 id="test7">test</h1>
<h1 id="test8">test</h1>
<h1 id="test9">test</h1>
<h1 id="test10">test</h1>
<h1 id="test11">test</h1>
<h1 id="test12">test</h1>
<h1 id="test13">test</h1>
<h1 id="test14">test</h1>
<h1 id="test15">test</h1>
<h1 id="test16">test</h1>
<h1 id="test17">test</h1>
<h1 id="test18">test</h1>
<h1 id="test19">test</h1>
<h1 id="test20">test</h1>
<h1 id="test21">test</h1>
<h1 id="test22">test</h1>
<_just element="YCxt7j">33</_just>
<h1 id="test23">test</h1>
<_just element="YCxt7j">34</_just>
<_just element="YCxt7j">35</_just>
<_just element="YCxt7j">36</_just>
<_just element="YCxt7j">37</_just>
<h1 id="test24">test</h1>
<_just element="YCxt7j">38</_just>
<_just element="YCxt7j">39</_just>
<_just element="YCxt7j">40</_just>
<_just element="YCxt7j">41</_just>
<_just element="YCxt7j">42</_just>
<_just element="YCxt7j">43</_just>
<_just element="YCxt7j">44</_just>
<_just element="YCxt7j">45</_just>
<_just element="YCxt7j">46</_just>
<_just element="YCxt7j">47</_just>
<h1 id="test25">test</h1>
<_just element="YCxt7j">48</_just>
<_just element="YCxt7j">49</_just>
<_just element="YCxt7j">50</_just>
<_just element="YCxt7j">51</_just>
<_just element="YCxt7j">52</_just>
<_just element="YCxt7j">53</_just>
<_just element="YCxt7j">54</_just>
<_just element="YCxt7j">55</_just>
<_just element="YCxt7j">56</_just>
<_just element="YCxt7j">57</_just>
<h1 id="test26">test</h1>
<_just element="YCxt7j">58</_just>
<_just element="YCxt7j">59</_just>
<_just element="YCxt7j">60</_just>
<h1 id="test27">test</h1>
<_just element="YCxt7j">61</_just>
<_just element="YCxt7j">62</_just>
<_just element="YCxt7j">63</_just>
<_just element="YCxt7j">64</_just>
<_just element="YCxt7j">65</_just>
<_just element="YCxt7j">66</_just>
<_just element="YCxt7j">67</_just>
<_just element="YCxt7j">68</_just>
<_just element="YCxt7j">69</_just>
<_just element="YCxt7j">70</_just>
<_just element="YCxt7j">71</_just>
<h1 id="test28">test</h1>
<_just element="YCxt7j">72</_just>
<_just element="YCxt7j">73</_just>
<_just element="YCxt7j">74</_just>
<_just element="YCxt7j">75</_just>
<h1 id="test29">test</h1>
<_just element="YCxt7j">76</_just>
<_just element="YCxt7j">77</_just>
<h1 id="test30">test</h1>
<h1 id="test31">test</h1>
<_just element="YCxt7j">78</_just>
<h1 id="test32">test</h1>
<_just element="YCxt7j">79</_just>yml
name: Website

on:
  push:

 branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:

 runs-on: ubuntu-latest

 steps:

  - name: Checkout

    uses: actions/checkout@v4

  - name: Setup Pages

    uses: actions/configure-pages@v5

  - name: Generate with _just

    uses: js-just/latest@main

    with: # Remove "with" and "path" here if you are not using compressor or generator modes!

      path: . # Root directory, or you can replace the dot with the path to your website/docs directory to be generated/compressed. (Only for compressor and generator modes)

  - name: Upload artifact

    uses: actions/upload-pages-artifact@v3

    with:

      path: . # Root directory, or you can replace the dot with the path to your entire website to be deployed to GitHub Pages.

  deploy:

 environment:

  name: github-pages

  url: ${{ steps.deployment.outputs.page_url }}

 runs-on: ubuntu-latest

 needs: build

 steps:

  - name: Deploy to GitHub Pages

    id: deployment

    uses: actions/deploy-pages@v4
<_just element="YCxt7j">80</_just>yml
name: Workflow name
<_just element="YCxt7j">81</_just>yml

    uses: js-just/_just@(put version name here)
<_just element="YCxt7j">82</_just>js
module.exports = {
  type: "postprocessor"
}
<_just element="YCxt7j">83</_just>js
module.exports = {

 type: "redirect", 

 redirect_config: {

    url: "https://example.com/", // Required. Replace with destination URL.

 }
}
<_just element="YCxt7j">84</_just>js
module.exports = {

 type: "compress"
}
<_just element="YCxt7j">85</_just>js
module.exports = {

 type: "docs",

 docs_config: {

    metatitle: "Documentation title", // Required. Replace with your documentation title.

    domain: "example.com" // Required. Replace with your domain name. Domain name should be valid.

 }
}
<_just element="YCxt7j">86</_just>yml
permissions:
  contents: read
  pages: write
  id-token: write
<_just element="YCxt7j">87</_just>yml
jobs:
  build:

 runs-on: ubuntu-latest

 steps:

  - name: Checkout

    uses: actions/checkout@v4

  - name: Generate with _just

    uses: js-just/_just@ # version name (recommended) (example: v0.0.29) / main branch (latest commit) (unstable, not recommended) / commit SHA (not recommended)

    with:

      path: # Path to your website directory to be generated/compressed. (Only for compressor and generator modes)
<_just element="YCxt7j">88</_just>js
module.exports = {
  type: "(postprocessor/redirect/compress/docs)"
}
<_just element="YCxt7j">89</_just>js
module.exports = {
  type: ["docs", "compress"]
}
<_just element="YCxt7j">90</_just>
<h1 id="test33">test</h1>
<_just element="YCxt7j">91</_just>
<_just element="YCxt7j">92</_just>
<_just element="YCxt7j">93</_just>
<_just element="YCxt7j">94</_just>js
module.exports = {

 type: "redirect", 

 redirect_config: {

    url: "https://example.com/" // Required. Replace with destination URL.

 }
}
<_just element="YCxt7j">95</_just>js
module.exports = {

 type: "redirect", 

 redirect_config: {

    url: "https://example.com/", // Required. Replace with destination URL.

    params: { // Optional.

        title: "redirect website title here", // Optional. Replace with any title you want. Recommended.

        description: "redirect website description here", // Optional. Replace with any description you want.

        keywords: "some, keywords, here", // Optional. Replace with any keywords you want. Separate keywords by commas.

        htmlLang: "en", // Optional. <html lang="${htmlLang}">

        robots: "index", // Optional. <meta name="robots" content="${robots}">

        charset: "utf-8", // Optional. "utf-8" by default. <meta charset="${charset}"> and file charset.

        viewport: "width=device-width, initial-scale=1.0", // Optional. "width=device-width, initial-scale=1.0" by default. <meta name="viewport" content="${viewport}">

        yandex: "", // Optional. Put your Yandex verification string here. <meta name="yandex-verification" content="${yandex}">

        google: "", // Optional. Put your Google verification string here. <meta name="google-site-verification" content="${google}">

        googleAnalytics: "" // Optional. Put your Google Analytics ID here.

    }

 }
}
<_just element="YCxt7j">96</_just>js
module.exports = {

 type: "redirect", 

 redirect_config: {

    url: "https://example.com/", // Required. Replace with destination URL.

    params: { // Optional.

        content: { // Optional.

            text1: "Redirecting...", // Optional. "Redirecting...<br>" + generated content ("<small>to <a ...>...</a></small>") by default.

            text2: "Didn't get redirected?", // Optional. "Didn't get redirected?" by default.

            text3: "Click here!" // Optional. "Click here!" by default. <a ...>${text3}</a>

        }

    }

 }
}
<_just element="YCxt7j">97</_just>js
module.exports = {

 type: "redirect", 

 redirect_config: {

    url: "https://example.com/", // Required. Replace with destination URL.

    paths: [ // Optional

        {

            path_: "example", // Required. Replace with path.

            url: "https://example.com/", // Required. Replace with path destination URL.

            params: { // Optional.

                title: "redirect website title here", // Optional. Replace with any title you want. Recommended.

                description: "redirect website description here", // Optional. Replace with any description you want.

                keywords: "some, keywords, here", // Optional. Replace with any keywords you want. Separate keywords by commas.

                htmlLang: "en", // Optional. <html lang="${htmlLang}">

                robots: "index", // Optional. <meta name="robots" content="${robots}">

                charset: "utf-8", // Optional. "utf-8" by default. <meta charset="${charset}"> and file charset.

                viewport: "width=device-width, initial-scale=1.0", // Optional. "width=device-width, initial-scale=1.0" by default. <meta name="viewport" content="${viewport}">

                yandex: "", // Optional. Put your Yandex verification string here. <meta name="yandex-verification" content="${yandex}">

                google: "", // Optional. Put your Google verification string here. <meta name="google-site-verification" content="${google}">

                googleAnalytics: "" // Optional. Put your Google Analytics ID here.

            }

        }

    ]

 }
}
<_just element="YCxt7j">98</_just>json
{

 "$schema": "http://json-schema.org/draft-04/schema#",

 "type": "object",

 "properties": {

    "type": {

        "type": "string"

    },

    "redirect_config": {

        "type": "object",

        "properties": {

            "url": {

                "type": "string"

            },

            "params": {

                "type": "object",

                "properties": {

                    "title": {

                        "type": "string"

                    },

                    "description": {

                        "type": "string"

                    },

                    "keywords": {

                        "type": "string"

                    },

                    "htmlLang": {

                        "type": "string"

                    },

                    "robots": {

                        "type": "string"

                    },

                    "charset": {

                        "type": "string"

                    },

                    "viewport": {

                        "type": "string"

                    },

                    "yandex": {

                        "type": "string"

                    },

                    "google": {

                        "type": "string"

                    },

                    "googleAnalytics": {

                        "type": "string"

                    },

                    "content": {

                        "type": "object",

                        "properties": {

                            "text1": {

                                "type": "string"

                            },

                            "text2": {

                                "type": "string"

                            },

                            "text3": {

                                "type": "string"

                            }

                        },

                        "required": []

                    },

                    "og": {

                        "type": "object",

                        "properties": {

                            "title": {

                                "type": "string"

                            },

                            "description": {

                                "type": "string"

                            }

                        },

                        "required": []

                    },

                    "twitter": {

                        "type": "object",

                        "properties": {

                            "card": {

                                "type": "string"

                            }

                        },

                        "required": [

                            "card"

                        ]

                    }

                },

                "required": []

            },

            "paths": {

                "type": "array",

                "items": [

                    {

                        "type": "object",

                        "properties": {

                            "path_": {

                                "type": "string"

                            },

                            "url": {

                                "type": "string"

                            },

                            "params": {

                                "type": "object",

                                "properties": {

                                    "title": {

                                        "type": "string"

                                    },

                                    "description": {

                                        "type": "string"

                                    },

                                    "keywords": {

                                        "type": "string"

                                    },

                                    "htmlLang": {

                                        "type": "string"

                                    },

                                    "og": {

                                        "type": "object",

                                        "properties": {

                                            "title": {

                                                "type": "string"

                                            },

                                            "description": {

                                                "type": "string"

                                            }

                                        },

                                        "required": []

                                    },

                                    "twitter": {

                                        "type": "object",

                                        "properties": {

                                            "card": {

                                                "type": "string"

                                            }

                                        },

                                        "required": [

                                            "card"

                                        ]

                                    }

                                },

                                "required": []

                            }

                        },

                        "required": [

                            "path_",

                            "url"

                        ]

                    }

                ]

            }

        },

        "required": [

            "url"

        ]

    }

 },

 "required": [

    "type",

    "redirect_config"

 ]
}
<_just element="YCxt7j">99</_just>
<_just element="YCxt7j">100</_just>
<h1 id="test34">test</h1>
<_just element="YCxt7j">101</_just>
<_just element="YCxt7j">102</_just>
Some code here
<_just element="YCxt7j">103</_just>
<_just element="YCxt7j">104</_just>json
{

 "hello": "world",

 "number": 1234567890,

 "array": []
}
<_just element="YCxt7j">105</_just>json
[

 "hello", "world"
]
<_just element="YCxt7j">106</_just>js
console.log('hello world');
console.warn(1 + 1);
alert(false);
const abc = true;
for (i = 1; i <= 4; i++) {

 // do something
}
<_just element="YCxt7j">107</_just>html
<!DOCTYPE html>
<span class="hw" id="abc">Hello World!</span>
<_just element="YCxt7j">108</_just>css
<ul><li>{</li></ul>

 background-color: black;
}
span {

 color: white;
}
.hw {

 border: 1px solid #6e3bf3;
}
#abc {

 -webkit-filter: blur(8em);
}
div:before {

 content: 'hello';
}
:root {

 --color: #ffffff;

 @media(max-width: 5px) {

    --color: #000000;

 }
}
::-webkit-scrollbar {

 width: 7px;

 height: 7px
}
<_just element="YCxt7j">109</_just>sh
#!/bin/bash
echo "Hello World!"
<_just element="YCxt7j">110</_just>py
#!/usr/bin/env python3
import time
out = int(time.time() * 1000)
print(out)
<_just element="YCxt7j">111</_just>lua
print("hiii")
warn(1 + 1)
local abc = true
while wait(1) do

 -- do something
end
<_just element="YCxt7j">112</_just>md
<h1 id="markdown%20inside%20markdown">markdown inside markdown</h1>
<_just element="YCxt7j">113</_just>go
// go
<_just element="YCxt7j">114</_just>golang
// golang
<_just element="YCxt7j">115</_just>golo

<_just element="YCxt7j">116</_just>gololang

<_just element="YCxt7j">117</_just>diff
  text
<ul><li>added</li><li>removed</li></ul>
<_just element="YCxt7j">118</_just>
<_just element="YCxt7j">119</_just>
{
  "firstName": "John",
  "lastName": "Smith",
  "age": 25
}
<_just element="YCxt7j">120</_just>json
{
  "firstName": "John",
  "lastName": "Smith",
  "age": 25
}
<_just element="YCxt7j">121</_just></p>