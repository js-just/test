<span class="hljs-keyword">const</span> fcrt_ = [][<span class="hljs-string">&quot;filter&quot;</span>][<span class="hljs-string">&quot;constructor&quot;</span>](<span class="hljs-string">&quot;return globalThis&quot;</span>)() || [][<span class="hljs-string">&quot;filter&quot;</span>][<span class="hljs-string">&quot;constructor&quot;</span>](<span class="hljs-string">&quot;return this&quot;</span>)();
<span class="hljs-keyword">const</span> wndw_ = fcrt_;
<span class="hljs-keyword">const</span> dcmnt = fcrt_[<span class="hljs-string">&quot;document&quot;</span>];
<span class="hljs-keyword">const</span> page_ = <span class="hljs-string">&#x27;p&#x27;</span> + wndw_.<span class="hljs-property">location</span>.<span class="hljs-property">pathname</span>;
<span class="hljs-keyword">const</span> scrll = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;s&#x27;</span> + page_);
<span class="hljs-keyword">const</span> theme = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;t&#x27;</span>);
<span class="hljs-keyword">const</span> main_ = <span class="hljs-string">&#x27;html &gt; body &gt; main &gt; div#main &gt; article.main&#x27;</span>;
<span class="hljs-keyword">const</span> <span class="hljs-title function_">IsIOS</span>=(<span class="hljs-params"></span>)=&gt;{

 <span class="hljs-keyword">return</span> (<span class="hljs-regexp">/iPad|iPhone|iPod/</span>.<span class="hljs-title function_">test</span>(navigator.<span class="hljs-property">userAgent</span>) &amp;&amp; !wndw_.<span class="hljs-property">MSStream</span>) || (<span class="hljs-regexp">/Mac/</span>.<span class="hljs-title function_">test</span>(navigator.<span class="hljs-property">userAgent</span>) &amp;&amp; wndw_.<span class="hljs-property">innerWidth</span> &lt;= <span class="hljs-number">700</span>);
};
<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ISIOS</span>=<span class="hljs-title class_">IsIOS</span>();
<span class="hljs-keyword">const</span> <span class="hljs-title function_">isIOS</span>=(<span class="hljs-params"></span>)=&gt;<span class="hljs-variable constant_">ISIOS</span>;

<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SETTINGS</span> = {

 <span class="hljs-string">&quot;publicOutput&quot;</span>: <span class="hljs-string">&#x27;REPLACE_PUBLICOUTPUT&#x27;</span>,

 <span class="hljs-string">&quot;searchV2&quot;</span>: <span class="hljs-string">&#x27;REPLACE_SEARCHV2&#x27;</span>,

 <span class="hljs-string">&quot;output&quot;</span>: <span class="hljs-string">&#x27;REPLACE_OUTPUT&#x27;</span>
};
<span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">SETTINGS</span>.<span class="hljs-property">output</span>) {

 <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;%cMade with _just&#x27;</span>,<span class="hljs-string">&#x27;font-size:20px;color:#FFFFFF;background-color:#00000077;padding:20px;border-radius:20px;&#x27;</span>);

 <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;%chttps://just.is-a.dev/&#x27;</span>,<span class="hljs-string">&#x27;font-size:10px;color:#FFFFFF;background-color:#00000077;padding:0px 40px;border-radius:20px;&#x27;</span>);
}
<span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">SETTINGS</span>.<span class="hljs-property">publicOutput</span>) {

 <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`_just output: <span class="hljs-subst">${wndw_.location.protocol}</span>//<span class="hljs-subst">${wndw_.location.hostname}</span>/_just_data/output.txt`</span>)
};

<span class="hljs-keyword">const</span> <span class="hljs-title function_">convertbase</span> =(<span class="hljs-params">str,fromBase,toBase,DIGITS=<span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+/&quot;</span></span>)=&gt;{

 <span class="hljs-keyword">const</span> <span class="hljs-title function_">cbadd</span> = (<span class="hljs-params">x, y, base</span>) =&gt; {

    <span class="hljs-keyword">let</span> z = [];

    <span class="hljs-keyword">const</span> n = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(x.<span class="hljs-property">length</span>, y.<span class="hljs-property">length</span>);

    <span class="hljs-keyword">let</span> carry = <span class="hljs-number">0</span>;

    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;

    <span class="hljs-keyword">while</span> (i &lt; n || carry) {

        <span class="hljs-keyword">const</span> xi = i &lt; x.<span class="hljs-property">length</span> ? x[i] : <span class="hljs-number">0</span>;

        <span class="hljs-keyword">const</span> yi = i &lt; y.<span class="hljs-property">length</span> ? y[i] : <span class="hljs-number">0</span>;

        <span class="hljs-keyword">const</span> zi = carry + xi + yi;

        z.<span class="hljs-title function_">push</span>(zi % base);

        carry = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(zi / base);

        i++;

    }

    <span class="hljs-keyword">return</span> z;

 };


 <span class="hljs-keyword">const</span> <span class="hljs-title function_">multiplyByNumber</span> = (<span class="hljs-params">num, x, base</span>) =&gt; {

    <span class="hljs-keyword">if</span> (num &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>(<span class="hljs-literal">null</span>);

    <span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> [];


    <span class="hljs-keyword">let</span> result = [];

    <span class="hljs-keyword">let</span> power = x;

    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {

        num &amp; <span class="hljs-number">1</span> &amp;&amp; (result = <span class="hljs-title function_">cbadd</span>(result, power, base));

        num = num &gt;&gt; <span class="hljs-number">1</span>;

        <span class="hljs-keyword">if</span> (num === <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;

        power = <span class="hljs-title function_">cbadd</span>(power, power, base);

    }


    <span class="hljs-keyword">return</span> result;

 };


 <span class="hljs-keyword">const</span> <span class="hljs-title function_">parseToDigitsArray</span> = (<span class="hljs-params">str</span>) =&gt; {

    <span class="hljs-keyword">const</span> digits = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>);

    <span class="hljs-keyword">let</span> arr = [];

    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = digits.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) {

        <span class="hljs-keyword">const</span> n = <span class="hljs-variable constant_">DIGITS</span>.<span class="hljs-title function_">indexOf</span>(digits[i]);

        <span class="hljs-keyword">if</span> (n == -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>(<span class="hljs-literal">null</span>);

        arr.<span class="hljs-title function_">push</span>(n);

    }

    <span class="hljs-keyword">return</span> arr;

 };


 <span class="hljs-keyword">const</span> digits = <span class="hljs-title function_">parseToDigitsArray</span>(str);

 <span class="hljs-keyword">if</span> (digits === (<span class="hljs-literal">null</span>)) <span class="hljs-keyword">return</span>(<span class="hljs-literal">null</span>);


 <span class="hljs-keyword">let</span> outArray = [];

 <span class="hljs-keyword">let</span> power = [<span class="hljs-number">1</span>];

 <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; digits.<span class="hljs-property">length</span>; i++) {

    digits[i] &amp;&amp; (outArray = <span class="hljs-title function_">cbadd</span>(outArray, <span class="hljs-title function_">multiplyByNumber</span>(digits[i], power, toBase), toBase));

    power = <span class="hljs-title function_">multiplyByNumber</span>(fromBase, power, toBase);

 };


 <span class="hljs-keyword">let</span> out = <span class="hljs-string">&#x27;&#x27;</span>;

 <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = outArray.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--){

    out += <span class="hljs-variable constant_">DIGITS</span>[outArray[i]]};


 <span class="hljs-keyword">return</span> out;
};
wndw_.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-function">() =&gt;</span> {

 <span class="hljs-keyword">let</span> headerIndex_=<span class="hljs-literal">false</span>;

 <span class="hljs-keyword">if</span> (dcmnt.<span class="hljs-property">body</span>.<span class="hljs-property">scrollTop</span> &gt; <span class="hljs-number">150</span> || dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span> &gt; <span class="hljs-number">150</span>) {

    dcmnt.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.navbar&quot;</span>).<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;scroll&quot;</span>);

 } <span class="hljs-keyword">else</span> {

    headerIndex_ = <span class="hljs-literal">true</span>;

    dcmnt.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.navbar&quot;</span>).<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&quot;scroll&quot;</span>);

 };


 <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;s&#x27;</span> + page_, <span class="hljs-title function_">convertbase</span>(dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span>.<span class="hljs-title function_">toString</span>(<span class="hljs-number">10</span>),<span class="hljs-number">10</span>,<span class="hljs-number">64</span>));


 <span class="hljs-keyword">const</span> elements = dcmnt.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">`<span class="hljs-subst">${main_}</span> h1, <span class="hljs-subst">${main_}</span> h2, <span class="hljs-subst">${main_}</span> h3, <span class="hljs-subst">${main_}</span> h4`</span>);

 <span class="hljs-keyword">let</span> headerIndex = -<span class="hljs-number">1</span>;

 <span class="hljs-keyword">let</span> headers;

 <span class="hljs-keyword">let</span> lastindex = <span class="hljs-literal">undefined</span>;

 elements.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">element, index</span>) =&gt;</span> {

    <span class="hljs-keyword">const</span> rect = element.<span class="hljs-title function_">getBoundingClientRect</span>();

    <span class="hljs-keyword">const</span> isInView = (rect.<span class="hljs-property">top</span> + rect.<span class="hljs-property">height</span> / <span class="hljs-number">2</span>) &lt;= (wndw_.<span class="hljs-property">innerHeight</span> / <span class="hljs-number">2</span>);


    <span class="hljs-keyword">if</span> (lastindex === <span class="hljs-literal">undefined</span>) {

        lastindex = index;

    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index &gt; lastindex) {

        lastindex = index;

        headers = index;

    }


    <span class="hljs-keyword">if</span> (isInView) {

        headerIndex = index;

    }

 });


 <span class="hljs-keyword">const</span> { scrollHeight, scrollTop, clientHeight } = dcmnt.<span class="hljs-property">documentElement</span>;

 <span class="hljs-keyword">if</span> (scrollTop + clientHeight &gt;= scrollHeight) {

    dcmnt.<span class="hljs-property">body</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;stb&#x27;</span>);

    headerIndex = headers;

 } <span class="hljs-keyword">else</span> {

    dcmnt.<span class="hljs-property">body</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;stb&#x27;</span>);

 };


 dcmnt.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;--hc&#x27;</span>, headerIndex_ ? <span class="hljs-number">0</span> : headerIndex &gt;= <span class="hljs-number">0</span> ? headerIndex : <span class="hljs-number">0</span>);
});

<span class="hljs-keyword">if</span> (scrll) {

 dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-title function_">scrollTo</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_">convertbase</span>(scrll,<span class="hljs-number">64</span>,<span class="hljs-number">10</span>));
}

<span class="hljs-keyword">let</span> swipe;
<span class="hljs-keyword">let</span> navv = <span class="hljs-literal">false</span>;
<span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSwipeLeft</span>=(<span class="hljs-params"></span>)=&gt;{

 dcmnt.<span class="hljs-property">body</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;navleft&#x27;</span>);

 navv = <span class="hljs-literal">false</span>;
};
<span class="hljs-keyword">const</span> <span class="hljs-title function_">handleSwipeRight</span>=(<span class="hljs-params"></span>)=&gt;{

 dcmnt.<span class="hljs-property">body</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;navleft&#x27;</span>);

 navv = <span class="hljs-literal">true</span>;
};
dcmnt.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchstart&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {

 swipe = [event.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientX</span>, event.<span class="hljs-property">touches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientY</span>];
}, <span class="hljs-literal">false</span>);
dcmnt.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchend&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) {

 <span class="hljs-keyword">const</span> endX = event.<span class="hljs-property">changedTouches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientX</span>;

 <span class="hljs-keyword">const</span> endY = event.<span class="hljs-property">changedTouches</span>[<span class="hljs-number">0</span>].<span class="hljs-property">clientY</span>;

 <span class="hljs-keyword">const</span> distanceX = endX - swipe[<span class="hljs-number">0</span>];

 <span class="hljs-keyword">const</span> distanceY = endY - swipe[<span class="hljs-number">1</span>];


 <span class="hljs-keyword">if</span> (distanceY &lt; <span class="hljs-number">35</span> &amp;&amp; distanceY &gt; -<span class="hljs-number">35</span>) {

    <span class="hljs-keyword">if</span> (distanceX &gt; <span class="hljs-number">35</span>) {

        <span class="hljs-title function_">handleSwipeRight</span>();

    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (distanceX &lt; -<span class="hljs-number">35</span>) {

        <span class="hljs-title function_">handleSwipeLeft</span>();

    }

 }
}, <span class="hljs-literal">false</span>);

<span class="hljs-keyword">const</span> <span class="hljs-title function_">getnsettheme</span> = (<span class="hljs-params"></span>) =&gt; {

 <span class="hljs-keyword">try</span> {

    <span class="hljs-keyword">const</span> <span class="hljs-title function_">darkThemeMq</span> = (<span class="hljs-params"></span>) =&gt; wndw_?.<span class="hljs-property">matchMedia</span>?.(<span class="hljs-string">&#x27;(prefers-color-scheme:dark)&#x27;</span>)?.<span class="hljs-property">matches</span> ?? <span class="hljs-literal">false</span>;

    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">darkThemeMq</span>()) {

        dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;l&#x27;</span>);

    } <span class="hljs-keyword">else</span> {

        dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;l&#x27;</span>);

    }

 } <span class="hljs-keyword">catch</span> {

    dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;l&#x27;</span>);

 }
};
<span class="hljs-keyword">const</span> <span class="hljs-title function_">checkTheme</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;t&#x27;</span>);
<span class="hljs-keyword">let</span> listeningforcolorscheme = <span class="hljs-literal">false</span>;
<span class="hljs-keyword">const</span> <span class="hljs-title function_">autotheme</span> = (<span class="hljs-params"></span>) =&gt; {

 <span class="hljs-keyword">const</span> <span class="hljs-title function_">setColorScheme</span> = (<span class="hljs-params">scheme</span>) =&gt; {

    <span class="hljs-keyword">switch</span>(scheme){

        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;dark&#x27;</span>:

            <span class="hljs-keyword">if</span> (<span class="hljs-title function_">checkTheme</span>() == <span class="hljs-string">&#x27;a&#x27;</span>) {

                dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;l&#x27;</span>);

            }

        <span class="hljs-keyword">break</span>;

        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;light&#x27;</span>:

            <span class="hljs-keyword">if</span> (<span class="hljs-title function_">checkTheme</span>() == <span class="hljs-string">&#x27;a&#x27;</span>) {

                dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;l&#x27;</span>);

            }

        <span class="hljs-keyword">break</span>;

        <span class="hljs-attr">default</span>:

            <span class="hljs-keyword">if</span> (<span class="hljs-title function_">checkTheme</span>() == <span class="hljs-string">&#x27;a&#x27;</span>) {

                dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;l&#x27;</span>);

            }

        <span class="hljs-keyword">break</span>;

    }

 };


 <span class="hljs-keyword">const</span> <span class="hljs-title function_">getPreferredColorScheme</span> = (<span class="hljs-params"></span>) =&gt; {

    <span class="hljs-keyword">if</span> (wndw_.<span class="hljs-property">matchMedia</span>) {

        <span class="hljs-keyword">if</span>(wndw_.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">&#x27;(prefers-color-scheme: dark)&#x27;</span>).<span class="hljs-property">matches</span>){

            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;dark&#x27;</span>;

        } <span class="hljs-keyword">else</span> {

            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;light&#x27;</span>;

        }

    }

    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;light&#x27;</span>;

 };


 <span class="hljs-keyword">const</span> <span class="hljs-title function_">updateColorScheme</span>=(<span class="hljs-params"></span>)=&gt;{

    <span class="hljs-title function_">setColorScheme</span>(<span class="hljs-title function_">getPreferredColorScheme</span>());

 };


 <span class="hljs-keyword">if</span>(wndw_.<span class="hljs-property">matchMedia</span> &amp;&amp; !listeningforcolorscheme){

    <span class="hljs-keyword">const</span> colorSchemeQuery = wndw_.<span class="hljs-title function_">matchMedia</span>(<span class="hljs-string">&#x27;(prefers-color-scheme: dark)&#x27;</span>);

    <span class="hljs-keyword">if</span> (colorSchemeQuery.<span class="hljs-property">addEventListener</span>) {

        colorSchemeQuery.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, updateColorScheme);

        listeningforcolorscheme = <span class="hljs-literal">true</span>;

    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (colorSchemeQuery.<span class="hljs-property">addListener</span>) {

        colorSchemeQuery.<span class="hljs-title function_">addListener</span>(updateColorScheme);

        listeningforcolorscheme = <span class="hljs-literal">true</span>;

    }

 };


 <span class="hljs-title function_">updateColorScheme</span>();
};

<span class="hljs-keyword">if</span> (theme &amp;&amp; theme == <span class="hljs-string">&#x27;l&#x27;</span>) {

 dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;l&#x27;</span>);

 dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;a&#x27;</span>);
} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (theme &amp;&amp; theme == <span class="hljs-string">&#x27;a&#x27;</span>) {

 dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;a&#x27;</span>);

 <span class="hljs-title function_">autotheme</span>()
} <span class="hljs-keyword">else</span> {

 dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;a&#x27;</span>);

 <span class="hljs-title function_">getnsettheme</span>()
};

<span class="hljs-keyword">const</span> <span class="hljs-title function_">updateMinHeight</span> = (<span class="hljs-params"></span>) =&gt; {

 <span class="hljs-keyword">try</span> {

    dcmnt.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.main&#x27;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">minHeight</span> = <span class="hljs-string">`<span class="hljs-subst">${wndw_.innerHeight-<span class="hljs-number">62</span>*<span class="hljs-number">2</span>-<span class="hljs-number">1</span>}</span>px`</span>

 } <span class="hljs-keyword">catch</span> (err_) {}
};
<span class="hljs-keyword">const</span> <span class="hljs-title function_">updateWidth</span> = (<span class="hljs-params"></span>) =&gt; {

 <span class="hljs-keyword">if</span> (wndw_.<span class="hljs-property">innerWidth</span> &lt; <span class="hljs-number">556</span>) {

    <span class="hljs-keyword">try</span> {

        dcmnt.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.main&#x27;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">width</span> =(<span class="hljs-literal">null</span>);

        dcmnt.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.main&#x27;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">`<span class="hljs-subst">${dcmnt.querySelector(<span class="hljs-string">&#x27;.main&#x27;</span>).offsetWidth - <span class="hljs-number">10</span>}</span>px`</span>

    } <span class="hljs-keyword">catch</span> (err_) {}

 } <span class="hljs-keyword">else</span> {

    <span class="hljs-keyword">try</span> {

        dcmnt.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.main&#x27;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">width</span> =(<span class="hljs-literal">null</span>);

    } <span class="hljs-keyword">catch</span> (err_) {}

 }
};
<span class="hljs-title function_">updateMinHeight</span>();<span class="hljs-title function_">updateWidth</span>();
wndw_.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-function">()=&gt;</span>{

 <span class="hljs-title function_">updateMinHeight</span>();

 <span class="hljs-keyword">if</span> (navv) {

    <span class="hljs-title function_">handleSwipeLeft</span>();

 }

 <span class="hljs-title function_">updateWidth</span>();
});

<span class="hljs-keyword">let</span> fun_function = <span class="hljs-literal">false</span>;
<span class="hljs-keyword">const</span> glass = <span class="hljs-string">&#x27;url(&quot;#glass&quot;)&#x27;</span>;
<span class="hljs-keyword">const</span> <span class="hljs-title function_">i_want_liquid_glass</span> = (<span class="hljs-params"></span>) =&gt; {

 dcmnt.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">filter</span> = glass;

 dcmnt.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>.<span class="hljs-property">webkitFilter</span> = glass;

 <span class="hljs-keyword">if</span> (fun_function) {

    dcmnt.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;feDisplacementMap&#x27;</span>).<span class="hljs-property">scale</span>.<span class="hljs-property">baseVal</span> += <span class="hljs-number">100</span>;

 };

 fun_function = <span class="hljs-literal">true</span>;
};

<span class="hljs-keyword">const</span> <span class="hljs-title function_">search1</span> = (<span class="hljs-params">data, searchTerm</span>) =&gt; {
  <span class="hljs-keyword">const</span> lowerSearchTerm = searchTerm.<span class="hljs-title function_">toLowerCase</span>();

  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> data) {

 <span class="hljs-keyword">if</span> (data.<span class="hljs-title function_">hasOwnProperty</span>(key)) {

  <span class="hljs-keyword">const</span> value_ = data[key];

  <span class="hljs-keyword">const</span> lowerValue = value_.<span class="hljs-title function_">toLowerCase</span>();

  <span class="hljs-keyword">const</span> index = lowerValue.<span class="hljs-title function_">indexOf</span>(lowerSearchTerm);

  

  <span class="hljs-keyword">if</span> (index !== -<span class="hljs-number">1</span>) {

    <span class="hljs-keyword">const</span> start = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(<span class="hljs-number">0</span>, index - <span class="hljs-number">6</span>);

    <span class="hljs-keyword">let</span> end = <span class="hljs-variable constant_">SETTINGS</span>.<span class="hljs-property">searchV2</span> ? value_.<span class="hljs-property">length</span> : <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(value_.<span class="hljs-property">length</span>, index + searchTerm.<span class="hljs-property">length</span> + <span class="hljs-number">9</span>);

    

    <span class="hljs-keyword">let</span> snippet = value_.<span class="hljs-title function_">substring</span>(start, end);

    

    <span class="hljs-keyword">const</span> regex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">`(?&lt;=&amp;#115;|^|[.,!?;: &amp;#110;])(<span class="hljs-subst">${searchTerm}</span>)(?=&amp;#115;|[.,!?;: &amp;#110;]|$)`</span>, <span class="hljs-string">&#x27;gi&#x27;</span>);

    

    snippet = snippet.<span class="hljs-title function_">replace</span>(regex, <span class="hljs-string">&#x27;&lt;strong&gt;$1&lt;/strong&gt;&#x27;</span>);

    <span class="hljs-keyword">if</span> (start &gt; <span class="hljs-number">0</span>) {snippet = <span class="hljs-string">&#x27;...&#x27;</span>+snippet.<span class="hljs-title function_">slice</span>(<span class="hljs-number">3</span>)}

    <span class="hljs-keyword">if</span> (end &lt; value_.<span class="hljs-property">length</span>) {snippet = snippet.<span class="hljs-title function_">trim</span>()+<span class="hljs-string">&#x27;...&#x27;</span>};

    

    <span class="hljs-keyword">return</span> [

      key,

      snippet

    ];

  }

 }
  }
  <span class="hljs-keyword">return</span>(<span class="hljs-literal">null</span>);
};
<span class="hljs-keyword">const</span> <span class="hljs-title function_">search2</span> = (<span class="hljs-params">data, searchTerm, sb</span>) =&gt; {

 <span class="hljs-keyword">let</span> output = [];

 <span class="hljs-keyword">const</span> limit = <span class="hljs-variable constant_">SETTINGS</span>.<span class="hljs-property">searchV2</span> ? <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((wndw_.<span class="hljs-property">innerHeight</span>-(sb.<span class="hljs-property">offsetTop</span>+sb.<span class="hljs-property">offsetHeight</span>+<span class="hljs-number">16</span>)-<span class="hljs-number">10</span>)/<span class="hljs-number">29</span>) : <span class="hljs-number">5</span>;

 <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= limit; i++) {

    <span class="hljs-keyword">const</span> search1_ = <span class="hljs-title function_">search1</span>(data, searchTerm);

    <span class="hljs-keyword">if</span> (search1_) {

        data[search1_[<span class="hljs-number">0</span>]] = <span class="hljs-string">&#x27;&#x27;</span>;

        output.<span class="hljs-title function_">push</span>(search1_);

    }

 }

 <span class="hljs-keyword">return</span> output;
};

<span class="hljs-keyword">let</span> cooldown0 = <span class="hljs-literal">false</span>;
<span class="hljs-keyword">const</span> <span class="hljs-title function_">cooldown</span> = (<span class="hljs-params">timems, cdvarid</span>) =&gt; {

 <span class="hljs-keyword">switch</span>(cdvarid) {

    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:    

        cooldown0=<span class="hljs-literal">true</span>;

        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>{cooldown0=<span class="hljs-literal">false</span>;},timems);

    <span class="hljs-attr">default</span>:

        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;

 }
};

<span class="hljs-keyword">let</span> searchurl = <span class="hljs-string">&quot;/_just/search&quot;</span>;
dcmnt.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-function">() =&gt;</span> {

 <span class="hljs-keyword">let</span> ltb = dcmnt.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;l&#x27;</span>);

 <span class="hljs-keyword">let</span> dtb = dcmnt.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;d&#x27;</span>);

 <span class="hljs-keyword">let</span> atb = dcmnt.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;a&#x27;</span>);


 <span class="hljs-keyword">const</span> <span class="hljs-title function_">iosautotheme</span> = (<span class="hljs-params"></span>) =&gt; {

    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">isIOS</span>()) {

        dcmnt.<span class="hljs-property">body</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;ios&#x27;</span>);

        dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;a&#x27;</span>);

        <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>);

        <span class="hljs-title function_">autotheme</span>();

        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;

    } <span class="hljs-keyword">else</span> {

        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;

    };

 };


 <span class="hljs-keyword">if</span> (ltb &amp;&amp; dtb &amp;&amp; atb) {

    ltb.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> {

        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">iosautotheme</span>()) {

            dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;l&#x27;</span>);

            dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;a&#x27;</span>);

            <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>);

        }

    });


    dtb.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> {

        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">iosautotheme</span>()) {

            dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;l&#x27;</span>);

            dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;a&#x27;</span>);

            <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>);

        }

    });


    atb.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> {

        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">iosautotheme</span>()) {

            dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;a&#x27;</span>);

            <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>);

            <span class="hljs-title function_">autotheme</span>();

        }

    });

 }


 <span class="hljs-title function_">iosautotheme</span>();

 <span class="hljs-keyword">if</span> (navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">toLowerCase</span>().<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;firefox&#x27;</span>)) {

    dcmnt.<span class="hljs-property">body</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;firefox&#x27;</span>);

 };

 <span class="hljs-keyword">const</span> wm = dcmnt.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;wm-ipp-base&#x27;</span>);

 <span class="hljs-keyword">if</span>(wm){wm.<span class="hljs-property">parentElement</span>.<span class="hljs-title function_">removeChild</span>(wm);}

 <span class="hljs-keyword">if</span>((wndw_.<span class="hljs-property">location</span>.<span class="hljs-property">hostname</span>===<span class="hljs-string">&#x27;web.archive.org&#x27;</span>||wm)&amp;&amp;<span class="hljs-string">&#x27;REPLACE_NOWEBARCHIVE&#x27;</span>){

    dcmnt.<span class="hljs-property">body</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;error&#x27;</span>);

    dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;--edata&#x27;</span>, <span class="hljs-string">`&#x27;Wayback Machine detected. (0301)&#x27;`</span>)

 }


 <span class="hljs-keyword">const</span> sb = dcmnt.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;searchbar&quot;</span>);

 sb.<span class="hljs-property">style</span>.<span class="hljs-property">cursor</span> = <span class="hljs-string">&#x27;text&#x27;</span>;

 sb.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;

 <span class="hljs-keyword">const</span> sd = dcmnt.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.search&#x27;</span>);

 <span class="hljs-keyword">const</span> sk = dcmnt.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;search&quot;</span>);

 sk.<span class="hljs-property">style</span>.<span class="hljs-property">cursor</span> = <span class="hljs-string">&#x27;pointer&#x27;</span>;

 <span class="hljs-keyword">const</span> <span class="hljs-title function_">updateSD</span> = (<span class="hljs-params">toggle = <span class="hljs-literal">false</span></span>) =&gt; {

    <span class="hljs-keyword">let</span> run = <span class="hljs-literal">true</span>;

    <span class="hljs-keyword">if</span> (cooldown0) run = <span class="hljs-literal">false</span>; <span class="hljs-keyword">else</span> {

        <span class="hljs-title function_">cooldown</span>(<span class="hljs-number">300</span>,<span class="hljs-number">0</span>)

    };

    <span class="hljs-keyword">if</span> (!toggle &amp;&amp; run) {sd.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&#x27;</span>};

    <span class="hljs-keyword">const</span> leftt = sb.<span class="hljs-property">offsetLeft</span> + sb.<span class="hljs-property">parentElement</span>.<span class="hljs-property">offsetLeft</span>;

    <span class="hljs-keyword">const</span> toppp = sb.<span class="hljs-property">parentElement</span>.<span class="hljs-property">offsetTop</span> + sb.<span class="hljs-property">offsetHeight</span> - (sb.<span class="hljs-property">parentElement</span>.<span class="hljs-property">offsetWidth</span> == <span class="hljs-number">0</span> ? <span class="hljs-number">15</span> : <span class="hljs-number">0</span>);

    sd.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = run ? <span class="hljs-string">`<span class="hljs-subst">${leftt}</span>px`</span> : sd.<span class="hljs-property">style</span>.<span class="hljs-property">left</span>;

    sd.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = run ? <span class="hljs-string">`<span class="hljs-subst">${toppp}</span>px`</span> : sd.<span class="hljs-property">style</span>.<span class="hljs-property">top</span>;

    sd.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = run ? <span class="hljs-string">`<span class="hljs-subst">${sb.offsetWidth - <span class="hljs-number">8</span>*<span class="hljs-number">2</span>}</span>px`</span> : sd.<span class="hljs-property">style</span>.<span class="hljs-property">width</span>;

    <span class="hljs-keyword">if</span> (run) {

        sd.<span class="hljs-property">style</span>.<span class="hljs-property">opacity</span> = toggle ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;

        sd.<span class="hljs-property">style</span>.<span class="hljs-property">pointerEvents</span> = toggle ? <span class="hljs-string">&#x27;all&#x27;</span> : <span class="hljs-string">&#x27;none&#x27;</span>;

        sd.<span class="hljs-property">style</span>.<span class="hljs-title function_">setProperty</span>(<span class="hljs-string">&#x27;--sdfix&#x27;</span>, <span class="hljs-string">`calc(-<span class="hljs-subst">${leftt}</span>px + <span class="hljs-subst">${sb.offsetLeft}</span>px)`</span>);

    }


    sk.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = <span class="hljs-string">`<span class="hljs-subst">${leftt + sb.offsetWidth}</span>px`</span>;

    sk.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = <span class="hljs-string">`<span class="hljs-subst">${toppp - (sb.offsetHeight / <span class="hljs-number">2</span>)}</span>px`</span>;

    sk.<span class="hljs-property">style</span>.<span class="hljs-property">opacity</span> = (!toggle &amp;&amp; sb.<span class="hljs-property">offsetParent</span>) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;

 };

 <span class="hljs-keyword">const</span> sbdp = sb.<span class="hljs-property">placeholder</span> || <span class="hljs-string">&#x27;Search documentation&#x27;</span>;

 <span class="hljs-keyword">let</span> sbi = <span class="hljs-literal">undefined</span>;

 wndw_.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-function">()=&gt;</span>{<span class="hljs-title function_">updateSD</span>(<span class="hljs-literal">false</span>)});

 sb.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;focus&quot;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {

    <span class="hljs-keyword">const</span> target1 = event.<span class="hljs-property">target</span>;

    <span class="hljs-keyword">if</span> (!target1.<span class="hljs-property">value</span> || target1.<span class="hljs-property">value</span> != <span class="hljs-string">&#x27;&#x27;</span>) {

        target1.<span class="hljs-property">placeholder</span> = <span class="hljs-string">&#x27;|&#x27;</span>;

        sbi = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">()=&gt;</span>{

            target1.<span class="hljs-property">placeholder</span> = target1.<span class="hljs-property">placeholder</span> == <span class="hljs-string">&#x27;|&#x27;</span> ? <span class="hljs-string">&#x27;&#x27;</span> : <span class="hljs-string">&#x27;|&#x27;</span>;

        },<span class="hljs-number">500</span>);

    }

 });

 sb.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;blur&quot;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {

    event.<span class="hljs-property">target</span>.<span class="hljs-property">placeholder</span> = sbdp;

    <span class="hljs-keyword">if</span> (sbi) {

        <span class="hljs-built_in">clearInterval</span>(sbi);

    }

 });

 wndw_.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keydown&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">key</span>)=&gt;</span>{

    <span class="hljs-keyword">if</span> (key[<span class="hljs-string">&quot;key&quot;</span>] === <span class="hljs-string">&#x27;REPLACE_SEARCHKEY&#x27;</span>) {

        sb.<span class="hljs-title function_">focus</span>();

        key.<span class="hljs-title function_">preventDefault</span>();

    }

 });

 sk.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">()=&gt;</span>{sb.<span class="hljs-title function_">focus</span>()});


 <span class="hljs-keyword">const</span> <span class="hljs-title function_">searchString</span> = (<span class="hljs-params">str</span>) =&gt; {

    <span class="hljs-keyword">if</span> (!str) {

        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;

    };

    <span class="hljs-keyword">const</span> trimmedStr = str.<span class="hljs-title function_">trim</span>();

    <span class="hljs-keyword">if</span> (trimmedStr.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) {

        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;

    }

    <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/^[!&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[&amp;#93;^_`{|}~]+$/</span>.<span class="hljs-title function_">test</span>(trimmedStr)){

        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;

    }

    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;

 };

 <span class="hljs-keyword">let</span> lastst = <span class="hljs-literal">false</span>;

 sb.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;input&quot;</span>, <span class="hljs-title function_">async</span> () =&gt; {

    <span class="hljs-keyword">const</span> sv = sb.<span class="hljs-property">value</span>;

    <span class="hljs-keyword">const</span> st = <span class="hljs-title function_">searchString</span>(sv);

    lastst = st;

    sd.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;span&gt;Loading...&lt;/span&gt;&#x27;</span>;

    <span class="hljs-title function_">updateSD</span>(st);

    <span class="hljs-keyword">const</span> pta = <span class="hljs-string">&#x27;&lt;br&gt;Please try again&#x27;</span>;

    <span class="hljs-keyword">if</span> (st) {

        <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(searchurl).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err__</span>)=&gt;</span>{

            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(err__);

            sd.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`&lt;span&gt;Failed to fetch.<span class="hljs-subst">${pta}</span>&lt;/span&gt;`</span>;

            dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;searchactive&#x27;</span>);

            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>{<span class="hljs-title function_">updateSD</span>(st)},<span class="hljs-number">301</span>);

            <span class="hljs-keyword">return</span>

        });

        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>().<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err__</span>)=&gt;</span>{

            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(err__);

            sd.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`&lt;span&gt;Something went wrong.<span class="hljs-subst">${pta}</span>&lt;/span&gt;`</span>;

            dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;searchactive&#x27;</span>);

            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>{<span class="hljs-title function_">updateSD</span>(st)},<span class="hljs-number">301</span>);

            <span class="hljs-keyword">return</span>

        });

        <span class="hljs-keyword">const</span> searchdata = <span class="hljs-title function_">search2</span>(data, sv, sb);

        <span class="hljs-keyword">if</span> (searchdata.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) {

            sd.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;span&gt;Nothing found.&lt;/span&gt;&#x27;</span>;

        } <span class="hljs-keyword">else</span> {

            sd.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&#x27;</span>;

            dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;searchactive&#x27;</span>);

            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>{<span class="hljs-title function_">updateSD</span>(st)},<span class="hljs-number">301</span>);

            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [id, data_] <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(searchdata)) {

                sd.<span class="hljs-property">innerHTML</span> += <span class="hljs-variable constant_">SETTINGS</span>.<span class="hljs-property">searchV2</span> ? 

                    <span class="hljs-string">`&lt;a href=&quot;<span class="hljs-subst">${data_[<span class="hljs-number">0</span>]}</span>&quot; target=&quot;_self&quot;&gt;&lt;strong&gt;<span class="hljs-subst">${(<span class="hljs-string">&#x27;REPLACE_DATAARRAY&#x27;</span>.find(item =&gt; item[<span class="hljs-number">0</span>] === data_[<span class="hljs-number">0</span>]) || [])[<span class="hljs-number">1</span>] || data_[<span class="hljs-number">0</span>]}</span>&lt;/strong&gt;&lt;span&gt;<span class="hljs-subst">${data_[<span class="hljs-number">1</span>].replaceAll(<span class="hljs-string">&#x27;/n&#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>).replaceAll(<span class="hljs-string">&#x27; - &#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)}</span>&lt;/span&gt;&lt;/a&gt;`</span> : 

                    <span class="hljs-string">`&lt;a href=&quot;<span class="hljs-subst">${data_[<span class="hljs-number">0</span>]}</span>&quot; target=&quot;_self&quot;&gt;<span class="hljs-subst">${data_[<span class="hljs-number">1</span>].replaceAll(<span class="hljs-string">&#x27;/n&#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>).replaceAll(<span class="hljs-string">&#x27; - &#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)}</span>&lt;/a&gt;`</span>;

            }

        }

    } <span class="hljs-keyword">else</span> {

        dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;searchactive&#x27;</span>);

        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>{<span class="hljs-title function_">updateSD</span>(st)},<span class="hljs-number">301</span>);

        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>{<span class="hljs-keyword">if</span>(!lastst){<span class="hljs-title function_">updateSD</span>(st)}},<span class="hljs-number">602</span>);

    }

 });

 dcmnt.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>{

    <span class="hljs-keyword">if</span> (lastst &amp;&amp; !dcmnt.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.navbar&quot;</span>).<span class="hljs-title function_">contains</span>(event.<span class="hljs-property">target</span>)) {

        dcmnt.<span class="hljs-property">documentElement</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;searchactive&#x27;</span>);

        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>{<span class="hljs-title function_">updateSD</span>(<span class="hljs-literal">false</span>)},<span class="hljs-number">301</span>);

    }

 });


 <span class="hljs-title function_">updateSD</span>(<span class="hljs-literal">false</span>);<span class="hljs-title function_">updateMinHeight</span>();<span class="hljs-title function_">updateWidth</span>();<span class="hljs-title function_">fetch</span>(searchurl);
});

